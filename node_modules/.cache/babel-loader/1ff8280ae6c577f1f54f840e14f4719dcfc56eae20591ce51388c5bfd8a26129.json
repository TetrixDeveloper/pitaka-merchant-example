{"ast":null,"code":"var _s = $RefreshSig$();\nimport { fetchPaymentIntent } from './services';\nimport { useSelector } from 'react-redux';\nimport { getWalletSelector } from '@state/Wallet/selectors';\nimport { getCurrency } from '@state/Preference/selector';\nimport { useQuery } from '@tanstack/react-query';\nexport const paymentIntentKeys = {\n  all: ['paymentIntents'],\n  paymentIntent: () => [...paymentIntentKeys.all, 'paymentIntent']\n};\nexport const walletKeys = {\n  all: ['wallets'],\n  wallet: walletAddress => [...walletKeys.all, walletAddress],\n  walletTotalBalance: (walletAddress, totalContext, currency) => [...walletKeys.wallet(walletAddress), 'total', totalContext, currency],\n  walletBalance: (walletAddress, context) => [...walletKeys.wallet(walletAddress), {\n    ...context\n  }],\n  walletsAccumulatedTotalBalance: (walletsAddress, currency) => [...walletKeys.all, 'accumulatedTotalBalance', walletsAddress, currency]\n};\nexport const getFetchPaymentIntentQuery = paymentIntentId => ({\n  queryKey: paymentIntentKeys.paymentIntent(),\n  queryFn: () => fetchPaymentIntent(paymentIntentId)\n});\nexport const useWalletsAccumulatedTotalBalanceQuery = () => {\n  _s();\n  const {\n    wallets\n  } = useSelector(getWalletSelector());\n  const currency = useSelector(getCurrency);\n  const walletsList = Object.values(wallets);\n  const computeAccumulatedBalance = () => {\n    return walletsList.reduce((total, {\n      address\n    }) => {\n      const walletBalance = queryClient.getQueryData([...walletKeys.wallet(address), 'total']);\n      if (typeof walletBalance !== 'number') {\n        return 0;\n      }\n      return total + walletBalance;\n    }, 0);\n  };\n  return useQuery({\n    queryKey: walletKeys.walletsAccumulatedTotalBalance(walletsList.map(wallet => wallet.address), currency),\n    queryFn: computeAccumulatedBalance\n  });\n};\n_s(useWalletsAccumulatedTotalBalanceQuery, \"xE7Ooom/d+Ncy9hBndk5kAS/Fk0=\", false, function () {\n  return [useSelector, useSelector, useQuery];\n});","map":{"version":3,"names":["fetchPaymentIntent","useSelector","getWalletSelector","getCurrency","useQuery","paymentIntentKeys","all","paymentIntent","walletKeys","wallet","walletAddress","walletTotalBalance","totalContext","currency","walletBalance","context","walletsAccumulatedTotalBalance","walletsAddress","getFetchPaymentIntentQuery","paymentIntentId","queryKey","queryFn","useWalletsAccumulatedTotalBalanceQuery","_s","wallets","walletsList","Object","values","computeAccumulatedBalance","reduce","total","address","queryClient","getQueryData","map"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/features/merchant/queries.ts"],"sourcesContent":["import { fetchPaymentIntent } from './services';\nimport { useSelector } from 'react-redux';\nimport {getWalletSelector} from '@state/Wallet/selectors';\nimport { getCurrency } from '@state/Preference/selector';\nimport { useQuery } from '@tanstack/react-query';\n\nexport const paymentIntentKeys = {\n  all: ['paymentIntents'] as const,\n  paymentIntent: () => [...paymentIntentKeys.all, 'paymentIntent'] as const,\n};\n\nexport const walletKeys = {\n  all: ['wallets'] as const,\n  wallet: (walletAddress: string) =>\n    [...walletKeys.all, walletAddress] as const,\n  walletTotalBalance: (\n    walletAddress: string,\n    totalContext: WalletTotalBalanceContext,\n    currency: CurrencyType,\n  ) =>\n    [\n      ...walletKeys.wallet(walletAddress),\n      'total',\n      totalContext,\n      currency,\n    ] as const,\n  walletBalance: (walletAddress: string, context: WalletBalanceContext) =>\n    [\n      ...walletKeys.wallet(walletAddress),\n      {\n        ...context,\n      },\n    ] as const,\n  walletsAccumulatedTotalBalance: (\n    walletsAddress: string[],\n    currency: CurrencyType,\n  ) =>\n    [\n      ...walletKeys.all,\n      'accumulatedTotalBalance',\n      walletsAddress,\n      currency,\n    ] as const,\n};\n\nexport const getFetchPaymentIntentQuery = (paymentIntentId: string) => ({\n  queryKey: paymentIntentKeys.paymentIntent(),\n  queryFn: () => fetchPaymentIntent(paymentIntentId),\n});\n\n\nexport const useWalletsAccumulatedTotalBalanceQuery = () => {\n  const { wallets } = useSelector(getWalletSelector());\n  const currency = useSelector(getCurrency);\n  const walletsList = Object.values(wallets);\n\n  const computeAccumulatedBalance = () => {\n    return walletsList.reduce((total, { address }) => {\n      const walletBalance = queryClient.getQueryData([\n        ...walletKeys.wallet(address),\n        'total',\n      ]);\n      if (typeof walletBalance !== 'number') {\n        return 0;\n      }\n      return total + walletBalance;\n    }, 0);\n  };\n\n  return useQuery({\n    queryKey: walletKeys.walletsAccumulatedTotalBalance(\n      walletsList.map(wallet => wallet.address),\n      currency,\n    ),\n    queryFn: computeAccumulatedBalance,\n  });\n};"],"mappings":";AAAA,SAASA,kBAAkB,QAAQ,YAAY;AAC/C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAAQC,iBAAiB,QAAO,yBAAyB;AACzD,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,QAAQ,QAAQ,uBAAuB;AAEhD,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,GAAG,EAAE,CAAC,gBAAgB,CAAU;EAChCC,aAAa,EAAEA,CAAA,KAAM,CAAC,GAAGF,iBAAiB,CAACC,GAAG,EAAE,eAAe;AACjE,CAAC;AAED,OAAO,MAAME,UAAU,GAAG;EACxBF,GAAG,EAAE,CAAC,SAAS,CAAU;EACzBG,MAAM,EAAGC,aAAqB,IAC5B,CAAC,GAAGF,UAAU,CAACF,GAAG,EAAEI,aAAa,CAAU;EAC7CC,kBAAkB,EAAEA,CAClBD,aAAqB,EACrBE,YAAuC,EACvCC,QAAsB,KAEtB,CACE,GAAGL,UAAU,CAACC,MAAM,CAACC,aAAa,CAAC,EACnC,OAAO,EACPE,YAAY,EACZC,QAAQ,CACA;EACZC,aAAa,EAAEA,CAACJ,aAAqB,EAAEK,OAA6B,KAClE,CACE,GAAGP,UAAU,CAACC,MAAM,CAACC,aAAa,CAAC,EACnC;IACE,GAAGK;EACL,CAAC,CACO;EACZC,8BAA8B,EAAEA,CAC9BC,cAAwB,EACxBJ,QAAsB,KAEtB,CACE,GAAGL,UAAU,CAACF,GAAG,EACjB,yBAAyB,EACzBW,cAAc,EACdJ,QAAQ;AAEd,CAAC;AAED,OAAO,MAAMK,0BAA0B,GAAIC,eAAuB,KAAM;EACtEC,QAAQ,EAAEf,iBAAiB,CAACE,aAAa,CAAC,CAAC;EAC3Cc,OAAO,EAAEA,CAAA,KAAMrB,kBAAkB,CAACmB,eAAe;AACnD,CAAC,CAAC;AAGF,OAAO,MAAMG,sCAAsC,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1D,MAAM;IAAEC;EAAQ,CAAC,GAAGvB,WAAW,CAACC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMW,QAAQ,GAAGZ,WAAW,CAACE,WAAW,CAAC;EACzC,MAAMsB,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACH,OAAO,CAAC;EAE1C,MAAMI,yBAAyB,GAAGA,CAAA,KAAM;IACtC,OAAOH,WAAW,CAACI,MAAM,CAAC,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAK;MAChD,MAAMjB,aAAa,GAAGkB,WAAW,CAACC,YAAY,CAAC,CAC7C,GAAGzB,UAAU,CAACC,MAAM,CAACsB,OAAO,CAAC,EAC7B,OAAO,CACR,CAAC;MACF,IAAI,OAAOjB,aAAa,KAAK,QAAQ,EAAE;QACrC,OAAO,CAAC;MACV;MACA,OAAOgB,KAAK,GAAGhB,aAAa;IAC9B,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;EAED,OAAOV,QAAQ,CAAC;IACdgB,QAAQ,EAAEZ,UAAU,CAACQ,8BAA8B,CACjDS,WAAW,CAACS,GAAG,CAACzB,MAAM,IAAIA,MAAM,CAACsB,OAAO,CAAC,EACzClB,QACF,CAAC;IACDQ,OAAO,EAAEO;EACX,CAAC,CAAC;AACJ,CAAC;AAACL,EAAA,CAzBWD,sCAAsC;EAAA,QAC7BrB,WAAW,EACdA,WAAW,EAgBrBG,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}