{"ast":null,"code":"import getSymbolFromCurrency from 'currency-symbol-map';\nexport let CURRENCY = /*#__PURE__*/function (CURRENCY) {\n  CURRENCY[\"USD\"] = \"usd\";\n  CURRENCY[\"PHP\"] = \"php\";\n  return CURRENCY;\n}({});\nexport const formatBalance = (balance, options) => {\n  if (typeof balance !== 'number') {\n    return '';\n  }\n  const decimalPlaces = balance === 0 ? 0 : (options === null || options === void 0 ? void 0 : options.decimalPlaces) || 0;\n  const formattedBalance = Math.round(balance * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n  const validatedDecimalPlaces = Math.max(0, Math.min(4, decimalPlaces));\n  const fractionDigits = formattedBalance >= 0 ? validatedDecimalPlaces : 2;\n  const formattedValue = formattedBalance.toLocaleString('en-US', {\n    minimumFractionDigits: fractionDigits,\n    maximumFractionDigits: 2\n  });\n  return `${(options === null || options === void 0 ? void 0 : options.prefix) || ''}${formattedValue}`;\n};\nexport const formatCurrencyAmount = (amount, currency, decimalPlaces) => {\n  return formatBalance(amount, {\n    prefix: getSymbolFromCurrency(currency),\n    decimalPlaces: decimalPlaces || 2\n  });\n};","map":{"version":3,"names":["getSymbolFromCurrency","CURRENCY","formatBalance","balance","options","decimalPlaces","formattedBalance","Math","round","pow","validatedDecimalPlaces","max","min","fractionDigits","formattedValue","toLocaleString","minimumFractionDigits","maximumFractionDigits","prefix","formatCurrencyAmount","amount","currency"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/features/utils.ts"],"sourcesContent":["import getSymbolFromCurrency from 'currency-symbol-map';\n\ntype FormatBalanceOptions = {\n  prefix?: 'â‚±' | string;\n  decimalPlaces?: number;\n};\n\nexport enum CURRENCY {\n  USD = 'usd',\n  PHP = 'php',\n}\n\nexport type CurrencyType = CURRENCY | `${CURRENCY}`;\n\nexport const formatBalance = (\n  balance?: number,\n  options?: FormatBalanceOptions\n): string => {\n  if (typeof balance !== 'number') {\n    return '';\n  }\n  const decimalPlaces = balance === 0 ? 0 : options?.decimalPlaces || 0;\n  const formattedBalance =\n    Math.round(balance * Math.pow(10, decimalPlaces)) /\n    Math.pow(10, decimalPlaces);\n\n  const validatedDecimalPlaces = Math.max(0, Math.min(4, decimalPlaces));\n  const fractionDigits = formattedBalance >= 0 ? validatedDecimalPlaces : 2;\n\n  const formattedValue = formattedBalance.toLocaleString('en-US', {\n    minimumFractionDigits: fractionDigits,\n    maximumFractionDigits: 2,\n  });\n\n  return `${options?.prefix || ''}${formattedValue}`;\n};\n\nexport const formatCurrencyAmount = (\n  amount: number,\n  currency: CurrencyType,\n  decimalPlaces?: number\n) => {\n  return formatBalance(amount, {\n    prefix: getSymbolFromCurrency(currency),\n    decimalPlaces: decimalPlaces || 2,\n  });\n};\n"],"mappings":"AAAA,OAAOA,qBAAqB,MAAM,qBAAqB;AAOvD,WAAYC,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAOpB,OAAO,MAAMC,aAAa,GAAGA,CAC3BC,OAAgB,EAChBC,OAA8B,KACnB;EACX,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAO,EAAE;EACX;EACA,MAAME,aAAa,GAAGF,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAAC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,aAAa,KAAI,CAAC;EACrE,MAAMC,gBAAgB,GACpBC,IAAI,CAACC,KAAK,CAACL,OAAO,GAAGI,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEJ,aAAa,CAAC,CAAC,GACjDE,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEJ,aAAa,CAAC;EAE7B,MAAMK,sBAAsB,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEJ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEP,aAAa,CAAC,CAAC;EACtE,MAAMQ,cAAc,GAAGP,gBAAgB,IAAI,CAAC,GAAGI,sBAAsB,GAAG,CAAC;EAEzE,MAAMI,cAAc,GAAGR,gBAAgB,CAACS,cAAc,CAAC,OAAO,EAAE;IAC9DC,qBAAqB,EAAEH,cAAc;IACrCI,qBAAqB,EAAE;EACzB,CAAC,CAAC;EAEF,OAAO,GAAG,CAAAb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEc,MAAM,KAAI,EAAE,GAAGJ,cAAc,EAAE;AACpD,CAAC;AAED,OAAO,MAAMK,oBAAoB,GAAGA,CAClCC,MAAc,EACdC,QAAsB,EACtBhB,aAAsB,KACnB;EACH,OAAOH,aAAa,CAACkB,MAAM,EAAE;IAC3BF,MAAM,EAAElB,qBAAqB,CAACqB,QAAQ,CAAC;IACvChB,aAAa,EAAEA,aAAa,IAAI;EAClC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}