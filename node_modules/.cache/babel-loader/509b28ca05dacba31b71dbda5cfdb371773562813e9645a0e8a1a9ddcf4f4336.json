{"ast":null,"code":"import graphQLClient from 'graphQLClient';\nimport { graphql } from '__generated__/gql';\nconst requestExpressSendDocument = graphql(`\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\n    currentUser {\n      requestExpressSend(data: $data) {\n        transaction {\n          id\n          sentAmount\n          availableBalance\n          createdAt\n        }\n      }\n    }\n  }\n`);\nconst clearPaymentIntentDocument = graphql(`\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\n    currentUser {\n      clearPaymentIntent(data: $data) {\n        id\n        amount\n        fee\n        status\n        returnUrl\n      }\n    }\n  }\n`);\nconst fetchPaymentIntentDocument = graphql(`\n  query FetchPaymentIntent($paymentIntentId: String!) {\n    currentUser {\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\n        id\n        organizationId\n        requestedAmount\n        totalFees\n        description\n        statementDescriptor\n        returnUrl\n        createdAt\n        status\n      }\n    }\n  }\n`);\nconst getWalletAccountsDocument = graphql(`\n  query FetchWalletAccounts {\n    currentUser {\n      fetchWalletAccounts {\n        walletAccounts {\n          id\n          accountNumber\n          type\n          name\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`);\nconst getWalletAccountBalanceDocument = graphql(`\n  query FetchWalletAccountBalance($accountNumber: String!) {\n    currentUser {\n      fetchWalletAccountBalance(accountNumber: $accountNumber) {\n        availableBalance\n      }\n    }\n  }\n`);\nexport const requestExpressSend = async data => {\n  const result = await graphQLClient.request(requestExpressSendDocument, {\n    data\n  });\n  return result.currentUser.requestExpressSend;\n};\nexport const clearPaymentIntent = async data => {\n  const result = await graphQLClient.request(clearPaymentIntentDocument, {\n    data\n  });\n  return result.currentUser.clearPaymentIntent;\n};\nexport const fetchPaymentIntent = async paymentIntentId => {\n  const result = await graphQLClient.request(fetchPaymentIntentDocument, {\n    paymentIntentId\n  });\n  return result.currentUser.fetchPaymentIntent;\n};\nexport const fetchWalletAccounts = async () => {\n  var _result$currentUser$f;\n  const result = await graphQLClient.request(getWalletAccountsDocument);\n  return (_result$currentUser$f = result.currentUser.fetchWalletAccounts) === null || _result$currentUser$f === void 0 ? void 0 : _result$currentUser$f.walletAccounts;\n};\nexport const fetchWalletAccountBalance = async accountNumber => {\n  var _result$currentUser$f2;\n  const result = await graphQLClient.request(getWalletAccountBalanceDocument, {\n    accountNumber\n  });\n  return (_result$currentUser$f2 = result.currentUser.fetchWalletAccountBalance) === null || _result$currentUser$f2 === void 0 ? void 0 : _result$currentUser$f2.availableBalance;\n};","map":{"version":3,"names":["graphQLClient","graphql","requestExpressSendDocument","clearPaymentIntentDocument","fetchPaymentIntentDocument","getWalletAccountsDocument","getWalletAccountBalanceDocument","requestExpressSend","data","result","request","currentUser","clearPaymentIntent","fetchPaymentIntent","paymentIntentId","fetchWalletAccounts","_result$currentUser$f","walletAccounts","fetchWalletAccountBalance","accountNumber","_result$currentUser$f2","availableBalance"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/features/merchant/services.ts"],"sourcesContent":["import graphQLClient from 'graphQLClient';\n\nimport { graphql } from '__generated__/gql';\nimport {\n  ClearPaymentIntentInput,\n  RequestExpressSendInput,\n} from '__generated__/gql/graphql';\n\nconst requestExpressSendDocument = graphql(`\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\n    currentUser {\n      requestExpressSend(data: $data) {\n        transaction {\n          id\n          sentAmount\n          availableBalance\n          createdAt\n        }\n      }\n    }\n  }\n`);\n\nconst clearPaymentIntentDocument = graphql(`\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\n    currentUser {\n      clearPaymentIntent(data: $data) {\n        id\n        amount\n        fee\n        status\n        returnUrl\n      }\n    }\n  }\n`);\n\nconst fetchPaymentIntentDocument = graphql(`\n  query FetchPaymentIntent($paymentIntentId: String!) {\n    currentUser {\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\n        id\n        organizationId\n        requestedAmount\n        totalFees\n        description\n        statementDescriptor\n        returnUrl\n        createdAt\n        status\n      }\n    }\n  }\n`);\n\n\nconst getWalletAccountsDocument = graphql(`\n  query FetchWalletAccounts {\n    currentUser {\n      fetchWalletAccounts {\n        walletAccounts {\n          id\n          accountNumber\n          type\n          name\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`);\n\n\nconst getWalletAccountBalanceDocument = graphql(`\n  query FetchWalletAccountBalance($accountNumber: String!) {\n    currentUser {\n      fetchWalletAccountBalance(accountNumber: $accountNumber) {\n        availableBalance\n      }\n    }\n  }\n`);\n\nexport const requestExpressSend = async (data: RequestExpressSendInput) => {\n  const result = await graphQLClient.request(requestExpressSendDocument, {\n    data,\n  });\n\n  return result.currentUser.requestExpressSend;\n};\n\nexport const clearPaymentIntent = async (data: ClearPaymentIntentInput) => {\n  const result = await graphQLClient.request(clearPaymentIntentDocument, {\n    data,\n  });\n\n  return result.currentUser.clearPaymentIntent;\n};\n\nexport const fetchPaymentIntent = async (paymentIntentId: string) => {\n  const result = await graphQLClient.request(fetchPaymentIntentDocument, {\n    paymentIntentId,\n  });\n\n  return result.currentUser.fetchPaymentIntent;\n};\n\n\nexport const fetchWalletAccounts = async () => {\n  const result = await graphQLClient.request(getWalletAccountsDocument);\n  return result.currentUser.fetchWalletAccounts?.walletAccounts;\n};\n\nexport const fetchWalletAccountBalance = async (accountNumber: string) => {\n  const result = await graphQLClient.request(getWalletAccountBalanceDocument, {\n    accountNumber,\n  });\n  return result.currentUser.fetchWalletAccountBalance?.availableBalance;\n};\n\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,eAAe;AAEzC,SAASC,OAAO,QAAQ,mBAAmB;AAM3C,MAAMC,0BAA0B,GAAGD,OAAO,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEF,MAAME,0BAA0B,GAAGF,OAAO,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEF,MAAMG,0BAA0B,GAAGH,OAAO,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAGF,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAGF,MAAMK,+BAA+B,GAAGL,OAAO,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEF,OAAO,MAAMM,kBAAkB,GAAG,MAAOC,IAA6B,IAAK;EACzE,MAAMC,MAAM,GAAG,MAAMT,aAAa,CAACU,OAAO,CAACR,0BAA0B,EAAE;IACrEM;EACF,CAAC,CAAC;EAEF,OAAOC,MAAM,CAACE,WAAW,CAACJ,kBAAkB;AAC9C,CAAC;AAED,OAAO,MAAMK,kBAAkB,GAAG,MAAOJ,IAA6B,IAAK;EACzE,MAAMC,MAAM,GAAG,MAAMT,aAAa,CAACU,OAAO,CAACP,0BAA0B,EAAE;IACrEK;EACF,CAAC,CAAC;EAEF,OAAOC,MAAM,CAACE,WAAW,CAACC,kBAAkB;AAC9C,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,eAAuB,IAAK;EACnE,MAAML,MAAM,GAAG,MAAMT,aAAa,CAACU,OAAO,CAACN,0BAA0B,EAAE;IACrEU;EACF,CAAC,CAAC;EAEF,OAAOL,MAAM,CAACE,WAAW,CAACE,kBAAkB;AAC9C,CAAC;AAGD,OAAO,MAAME,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAAA,IAAAC,qBAAA;EAC7C,MAAMP,MAAM,GAAG,MAAMT,aAAa,CAACU,OAAO,CAACL,yBAAyB,CAAC;EACrE,QAAAW,qBAAA,GAAOP,MAAM,CAACE,WAAW,CAACI,mBAAmB,cAAAC,qBAAA,uBAAtCA,qBAAA,CAAwCC,cAAc;AAC/D,CAAC;AAED,OAAO,MAAMC,yBAAyB,GAAG,MAAOC,aAAqB,IAAK;EAAA,IAAAC,sBAAA;EACxE,MAAMX,MAAM,GAAG,MAAMT,aAAa,CAACU,OAAO,CAACJ,+BAA+B,EAAE;IAC1Ea;EACF,CAAC,CAAC;EACF,QAAAC,sBAAA,GAAOX,MAAM,CAACE,WAAW,CAACO,yBAAyB,cAAAE,sBAAA,uBAA5CA,sBAAA,CAA8CC,gBAAgB;AACvE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}