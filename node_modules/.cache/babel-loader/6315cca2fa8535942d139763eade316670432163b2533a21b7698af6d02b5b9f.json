{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchPaymentIntent, fetchWalletAccounts, fetchWalletAccountBalance } from './services';\nexport const paymentIntentKeys = {\n  all: ['paymentIntents'],\n  paymentIntent: () => [...paymentIntentKeys.all, 'paymentIntent']\n};\nexport const accountKeys = {\n  all: ['accounts'],\n  account: accountNumber => [...accountKeys.all, 'account', accountNumber],\n  activeAccount: accountNumber => [...accountKeys.account(accountNumber), 'activeAccount'],\n  accountList: () => [...accountKeys.all, 'accountList'],\n  accountsAccumulatedTotalBalance: () => [...accountKeys.all, 'accumulatedTotalBalance'],\n  accountWalletBalance: accountNumber => [...accountKeys.account(accountNumber), 'walletBalance'],\n  accountLimits: accountNumber => [...accountKeys.account(accountNumber), 'accountLimits']\n};\nexport const getFetchPaymentIntentQuery = paymentIntentId => ({\n  queryKey: paymentIntentKeys.paymentIntent(),\n  queryFn: () => fetchPaymentIntent(paymentIntentId)\n});\nexport const useGetWalletAccountsQuery = () => {\n  _s();\n  return useQuery({\n    queryKey: accountKeys.accountList(),\n    queryFn: fetchWalletAccounts\n  });\n};\n_s(useGetWalletAccountsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useGetWalletAccountBalanceQuery = (accountNumber = '') => {\n  _s2();\n  const {\n    data: accounts\n  } = useGetWalletAccountsQuery();\n  const fetchBalance = async () => {\n    if (!accountNumber && accounts) {\n      accountNumber = accounts !== null && accounts !== void 0 && accounts.length ? accounts[0].accountNumber : '';\n    }\n    return await fetchWalletAccountBalance(accountNumber);\n  };\n  return useQuery({\n    queryKey: accountKeys.accountWalletBalance(accountNumber),\n    queryFn: fetchBalance,\n    enabled: Boolean(accountNumber)\n  });\n};\n_s2(useGetWalletAccountBalanceQuery, \"QULUStf8spw+shhlf77BGml/i+A=\", false, function () {\n  return [useGetWalletAccountsQuery, useQuery];\n});","map":{"version":3,"names":["useQuery","fetchPaymentIntent","fetchWalletAccounts","fetchWalletAccountBalance","paymentIntentKeys","all","paymentIntent","accountKeys","account","accountNumber","activeAccount","accountList","accountsAccumulatedTotalBalance","accountWalletBalance","accountLimits","getFetchPaymentIntentQuery","paymentIntentId","queryKey","queryFn","useGetWalletAccountsQuery","_s","useGetWalletAccountBalanceQuery","_s2","data","accounts","fetchBalance","length","enabled","Boolean"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/features/merchant/queries.ts"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport { fetchPaymentIntent,fetchWalletAccounts,fetchWalletAccountBalance } from './services';\n\n\nexport const paymentIntentKeys = {\n  all: ['paymentIntents'] as const,\n  paymentIntent: () => [...paymentIntentKeys.all, 'paymentIntent'] as const,\n};\n\nexport const accountKeys = {\n  all: ['accounts'] as const,\n  account: (accountNumber: string) =>\n    [...accountKeys.all, 'account', accountNumber] as const,\n  activeAccount: (accountNumber: string) =>\n    [...accountKeys.account(accountNumber), 'activeAccount'] as const,\n  accountList: () => [...accountKeys.all, 'accountList'] as const,\n  accountsAccumulatedTotalBalance: () =>\n    [...accountKeys.all, 'accumulatedTotalBalance'] as const,\n  accountWalletBalance: (accountNumber: string) => [\n    ...accountKeys.account(accountNumber),\n    'walletBalance',\n  ],\n  accountLimits: (accountNumber: string) => [\n    ...accountKeys.account(accountNumber),\n    'accountLimits',\n  ],\n};\n\nexport const getFetchPaymentIntentQuery = (paymentIntentId: string) => ({\n  queryKey: paymentIntentKeys.paymentIntent(),\n  queryFn: () => fetchPaymentIntent(paymentIntentId),\n});\n\nexport const useGetWalletAccountsQuery = () => {\n  return useQuery({\n    queryKey: accountKeys.accountList(),\n    queryFn: fetchWalletAccounts,\n  });\n};\n\nexport const useGetWalletAccountBalanceQuery = (accountNumber = '') => {\n  const { data: accounts } = useGetWalletAccountsQuery();\n  const fetchBalance = async () => {\n    if (!accountNumber && accounts) {\n      accountNumber = accounts?.length ? accounts[0].accountNumber : '';\n    }\n    return await fetchWalletAccountBalance(accountNumber);\n  };\n\n  return useQuery({\n    queryKey: accountKeys.accountWalletBalance(accountNumber),\n    queryFn: fetchBalance,\n    enabled: Boolean(accountNumber),\n  });\n};"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,kBAAkB,EAACC,mBAAmB,EAACC,yBAAyB,QAAQ,YAAY;AAG7F,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,GAAG,EAAE,CAAC,gBAAgB,CAAU;EAChCC,aAAa,EAAEA,CAAA,KAAM,CAAC,GAAGF,iBAAiB,CAACC,GAAG,EAAE,eAAe;AACjE,CAAC;AAED,OAAO,MAAME,WAAW,GAAG;EACzBF,GAAG,EAAE,CAAC,UAAU,CAAU;EAC1BG,OAAO,EAAGC,aAAqB,IAC7B,CAAC,GAAGF,WAAW,CAACF,GAAG,EAAE,SAAS,EAAEI,aAAa,CAAU;EACzDC,aAAa,EAAGD,aAAqB,IACnC,CAAC,GAAGF,WAAW,CAACC,OAAO,CAACC,aAAa,CAAC,EAAE,eAAe,CAAU;EACnEE,WAAW,EAAEA,CAAA,KAAM,CAAC,GAAGJ,WAAW,CAACF,GAAG,EAAE,aAAa,CAAU;EAC/DO,+BAA+B,EAAEA,CAAA,KAC/B,CAAC,GAAGL,WAAW,CAACF,GAAG,EAAE,yBAAyB,CAAU;EAC1DQ,oBAAoB,EAAGJ,aAAqB,IAAK,CAC/C,GAAGF,WAAW,CAACC,OAAO,CAACC,aAAa,CAAC,EACrC,eAAe,CAChB;EACDK,aAAa,EAAGL,aAAqB,IAAK,CACxC,GAAGF,WAAW,CAACC,OAAO,CAACC,aAAa,CAAC,EACrC,eAAe;AAEnB,CAAC;AAED,OAAO,MAAMM,0BAA0B,GAAIC,eAAuB,KAAM;EACtEC,QAAQ,EAAEb,iBAAiB,CAACE,aAAa,CAAC,CAAC;EAC3CY,OAAO,EAAEA,CAAA,KAAMjB,kBAAkB,CAACe,eAAe;AACnD,CAAC,CAAC;AAEF,OAAO,MAAMG,yBAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7C,OAAOpB,QAAQ,CAAC;IACdiB,QAAQ,EAAEV,WAAW,CAACI,WAAW,CAAC,CAAC;IACnCO,OAAO,EAAEhB;EACX,CAAC,CAAC;AACJ,CAAC;AAACkB,EAAA,CALWD,yBAAyB;EAAA,QAC7BnB,QAAQ;AAAA;AAMjB,OAAO,MAAMqB,+BAA+B,GAAGA,CAACZ,aAAa,GAAG,EAAE,KAAK;EAAAa,GAAA;EACrE,MAAM;IAAEC,IAAI,EAAEC;EAAS,CAAC,GAAGL,yBAAyB,CAAC,CAAC;EACtD,MAAMM,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAAChB,aAAa,IAAIe,QAAQ,EAAE;MAC9Bf,aAAa,GAAGe,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEE,MAAM,GAAGF,QAAQ,CAAC,CAAC,CAAC,CAACf,aAAa,GAAG,EAAE;IACnE;IACA,OAAO,MAAMN,yBAAyB,CAACM,aAAa,CAAC;EACvD,CAAC;EAED,OAAOT,QAAQ,CAAC;IACdiB,QAAQ,EAAEV,WAAW,CAACM,oBAAoB,CAACJ,aAAa,CAAC;IACzDS,OAAO,EAAEO,YAAY;IACrBE,OAAO,EAAEC,OAAO,CAACnB,aAAa;EAChC,CAAC,CAAC;AACJ,CAAC;AAACa,GAAA,CAdWD,+BAA+B;EAAA,QACfF,yBAAyB,EAQ7CnB,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}