{"ast":null,"code":"import graphQLClient from 'graphQLClient';\nimport { graphql } from '__generated__/gql';\nconst getCurrentUserDetailsDocument = graphql(`\n  query GetCurrentUserDetails {\n    currentUser {\n      getCurrentUserDetails {\n        id\n        displayName\n        auth0UserId\n        createdAt\n        profile {\n          id\n          userId\n          firstName\n          middleName\n          lastName\n          mobileNumber\n          emailAddress\n          userProfilePicture {\n            profilePicture\n            avatarType\n            isUseAvatar\n          }\n        }\n      }\n    }\n  }\n`);\nconst fetchCurrentUserWalletAccountsDocument = graphql(`\n  query FetchWalletAccounts {\n    currentUser {\n      fetchWalletAccounts {\n        walletAccounts {\n          id\n          accountNumber\n          type\n          name\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`);\nconst verifyPinDocument = graphql(`\n  mutation VerifyPin($pin: String!) {\n    currentUser {\n      verifyPin(pin: $pin) {\n        token\n        expiresAt\n      }\n    }\n  }\n`);\nexport const fetchCurrentUserDetails = async () => {\n  const result = await graphQLClient.request(getCurrentUserDetailsDocument);\n  return result.currentUser.getCurrentUserDetails;\n};\nexport const fetchCurrentUserWalletAccounts = async () => {\n  const result = await graphQLClient.request(fetchCurrentUserWalletAccountsDocument);\n  return result.currentUser.fetchWalletAccounts.walletAccounts;\n};\nexport const verifyPin = async pin => {\n  const result = await graphQLClient.request(verifyPinDocument, {\n    pin\n  });\n  return result.currentUser.verifyPin;\n};","map":{"version":3,"names":["graphQLClient","graphql","getCurrentUserDetailsDocument","fetchCurrentUserWalletAccountsDocument","verifyPinDocument","fetchCurrentUserDetails","result","request","currentUser","getCurrentUserDetails","fetchCurrentUserWalletAccounts","fetchWalletAccounts","walletAccounts","verifyPin","pin"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/features/auth/services.ts"],"sourcesContent":["import graphQLClient from 'graphQLClient';\nimport { graphql } from '__generated__/gql';\n\nconst getCurrentUserDetailsDocument = graphql(`\n  query GetCurrentUserDetails {\n    currentUser {\n      getCurrentUserDetails {\n        id\n        displayName\n        auth0UserId\n        createdAt\n        profile {\n          id\n          userId\n          firstName\n          middleName\n          lastName\n          mobileNumber\n          emailAddress\n          userProfilePicture {\n            profilePicture\n            avatarType\n            isUseAvatar\n          }\n        }\n      }\n    }\n  }\n`);\n\nconst fetchCurrentUserWalletAccountsDocument = graphql(`\n  query FetchWalletAccounts {\n    currentUser {\n      fetchWalletAccounts {\n        walletAccounts {\n          id\n          accountNumber\n          type\n          name\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`);\n\nconst verifyPinDocument = graphql(`\n  mutation VerifyPin($pin: String!) {\n    currentUser {\n      verifyPin(pin: $pin) {\n        token\n        expiresAt\n      }\n    }\n  }\n`);\n\nexport const fetchCurrentUserDetails = async () => {\n  const result = await graphQLClient.request(getCurrentUserDetailsDocument);\n\n  return result.currentUser.getCurrentUserDetails;\n};\n\nexport const fetchCurrentUserWalletAccounts = async () => {\n  const result = await graphQLClient.request(\n    fetchCurrentUserWalletAccountsDocument\n  );\n\n  return result.currentUser.fetchWalletAccounts.walletAccounts;\n};\n\nexport const verifyPin = async (pin: string) => {\n  const result = await graphQLClient.request(verifyPinDocument, {\n    pin,\n  });\n\n  return result.currentUser.verifyPin;\n};\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,eAAe;AACzC,SAASC,OAAO,QAAQ,mBAAmB;AAE3C,MAAMC,6BAA6B,GAAGD,OAAO,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEF,MAAME,sCAAsC,GAAGF,OAAO,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEF,MAAMG,iBAAiB,GAAGH,OAAO,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEF,OAAO,MAAMI,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EACjD,MAAMC,MAAM,GAAG,MAAMN,aAAa,CAACO,OAAO,CAACL,6BAA6B,CAAC;EAEzE,OAAOI,MAAM,CAACE,WAAW,CAACC,qBAAqB;AACjD,CAAC;AAED,OAAO,MAAMC,8BAA8B,GAAG,MAAAA,CAAA,KAAY;EACxD,MAAMJ,MAAM,GAAG,MAAMN,aAAa,CAACO,OAAO,CACxCJ,sCACF,CAAC;EAED,OAAOG,MAAM,CAACE,WAAW,CAACG,mBAAmB,CAACC,cAAc;AAC9D,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAOC,GAAW,IAAK;EAC9C,MAAMR,MAAM,GAAG,MAAMN,aAAa,CAACO,OAAO,CAACH,iBAAiB,EAAE;IAC5DU;EACF,CAAC,CAAC;EAEF,OAAOR,MAAM,CAACE,WAAW,CAACK,SAAS;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}