{"ast":null,"code":"/* eslint-disable */\nimport * as types from './graphql';\n/**\r\n * Map of all GraphQL operations in the project.\r\n *\r\n * This map has several performance disadvantages:\r\n * 1. It is not tree-shakeable, so it will include all operations in the project.\r\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\r\n * 3. It does not support dead code elimination, so it will add unused operations.\r\n *\r\n * Therefore it is highly recommended to use the babel or swc plugin for production.\r\n */\nconst documents = {\n  \"\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": types.GetCurrentUserDetailsDocument,\n  \"\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n\": types.FetchWalletAccountsDocument,\n  \"\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n\": types.VerifyPinDocument,\n  \"\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n\": types.RequestExpressSendDocument,\n  \"\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n\": types.ClearPaymentIntentDocument,\n  \"\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n\": types.FetchPaymentIntentDocument\n};\n\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n *\r\n *\r\n * @example\r\n * ```ts\r\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\r\n * ```\r\n *\r\n * The query argument is unknown!\r\n * Please regenerate the types.\r\n */\n\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\n\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\n\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\n\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\n\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\n\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\n\nexport function graphql(source) {\n  var _source;\n  return (_source = documents[source]) !== null && _source !== void 0 ? _source : {};\n}","map":{"version":3,"names":["types","documents","GetCurrentUserDetailsDocument","FetchWalletAccountsDocument","VerifyPinDocument","RequestExpressSendDocument","ClearPaymentIntentDocument","FetchPaymentIntentDocument","graphql","source","_source"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/__generated__/gql/gql.ts"],"sourcesContent":["/* eslint-disable */\r\nimport * as types from './graphql';\r\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\r\n\r\n/**\r\n * Map of all GraphQL operations in the project.\r\n *\r\n * This map has several performance disadvantages:\r\n * 1. It is not tree-shakeable, so it will include all operations in the project.\r\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\r\n * 3. It does not support dead code elimination, so it will add unused operations.\r\n *\r\n * Therefore it is highly recommended to use the babel or swc plugin for production.\r\n */\r\nconst documents = {\r\n    \"\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": types.GetCurrentUserDetailsDocument,\r\n    \"\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n\": types.FetchWalletAccountsDocument,\r\n    \"\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n\": types.VerifyPinDocument,\r\n    \"\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n\": types.RequestExpressSendDocument,\r\n    \"\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n\": types.ClearPaymentIntentDocument,\r\n    \"\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n\": types.FetchPaymentIntentDocument,\r\n};\r\n\r\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n *\r\n *\r\n * @example\r\n * ```ts\r\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\r\n * ```\r\n *\r\n * The query argument is unknown!\r\n * Please regenerate the types.\r\n */\r\nexport function graphql(source: string): unknown;\r\n\r\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\r\nexport function graphql(source: \"\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"];\r\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\r\nexport function graphql(source: \"\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n\"];\r\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\r\nexport function graphql(source: \"\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n\"];\r\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\r\nexport function graphql(source: \"\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n\"];\r\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\r\nexport function graphql(source: \"\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n\"];\r\n/**\r\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\r\n */\r\nexport function graphql(source: \"\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n\"];\r\n\r\nexport function graphql(source: string) {\r\n  return (documents as any)[source] ?? {};\r\n}\r\n\r\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,WAAW;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EACd,4dAA4d,EAAED,KAAK,CAACE,6BAA6B;EACjgB,8PAA8P,EAAEF,KAAK,CAACG,2BAA2B;EACjS,mJAAmJ,EAAEH,KAAK,CAACI,iBAAiB;EAC5K,8QAA8Q,EAAEJ,KAAK,CAACK,0BAA0B;EAChT,mOAAmO,EAAEL,KAAK,CAACM,0BAA0B;EACrQ,4VAA4V,EAAEN,KAAK,CAACO;AACxW,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA,OAAO,SAASC,OAAOA,CAACC,MAAc,EAAE;EAAA,IAAAC,OAAA;EACtC,QAAAA,OAAA,GAAQT,SAAS,CAASQ,MAAM,CAAC,cAAAC,OAAA,cAAAA,OAAA,GAAI,CAAC,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}