{"ast":null,"code":"/* eslint-disable */\nimport * as types from './graphql';\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */\nconst documents = {\n  '\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n': types.GetCurrentUserDetailsDocument,\n  '\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n': types.FetchWalletAccountsDocument,\n  '\\n  query FetchWalletAccountBalance($accountNumber: String!) {\\n    currentUser {\\n      fetchWalletAccountBalance(accountNumber: $accountNumber) {\\n        availableBalance\\n      }\\n    }\\n  }\\n': types.FetchWalletAccountBalanceDocument,\n  '\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n': types.VerifyPinDocument,\n  '\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n': types.RequestExpressSendDocument,\n  '\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n': types.ClearPaymentIntentDocument,\n  '\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n': types.FetchPaymentIntentDocument\n};\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n */\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\nexport function graphql(source) {\n  var _source;\n  return (_source = documents[source]) !== null && _source !== void 0 ? _source : {};\n}","map":{"version":3,"names":["types","documents","GetCurrentUserDetailsDocument","FetchWalletAccountsDocument","FetchWalletAccountBalanceDocument","VerifyPinDocument","RequestExpressSendDocument","ClearPaymentIntentDocument","FetchPaymentIntentDocument","graphql","source","_source"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/__generated__/gql/gql.ts"],"sourcesContent":["/* eslint-disable */\nimport * as types from './graphql';\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */\nconst documents = {\n  '\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n':\n    types.GetCurrentUserDetailsDocument,\n  '\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n':\n    types.FetchWalletAccountsDocument,\n  '\\n  query FetchWalletAccountBalance($accountNumber: String!) {\\n    currentUser {\\n      fetchWalletAccountBalance(accountNumber: $accountNumber) {\\n        availableBalance\\n      }\\n    }\\n  }\\n': \n    types.FetchWalletAccountBalanceDocument,\n  '\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n':\n    types.VerifyPinDocument,\n  '\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n':\n    types.RequestExpressSendDocument,\n  '\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n':\n    types.ClearPaymentIntentDocument,\n  '\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n':\n    types.FetchPaymentIntentDocument,\n    \n};\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n */\nexport function graphql(source: string): unknown;\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: '\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n'\n): (typeof documents)['\\n  query GetCurrentUserDetails {\\n    currentUser {\\n      getCurrentUserDetails {\\n        id\\n        displayName\\n        auth0UserId\\n        createdAt\\n        profile {\\n          id\\n          userId\\n          firstName\\n          middleName\\n          lastName\\n          mobileNumber\\n          emailAddress\\n          userProfilePicture {\\n            profilePicture\\n            avatarType\\n            isUseAvatar\\n          }\\n        }\\n      }\\n    }\\n  }\\n'];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: '\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n'\n): (typeof documents)['\\n  query FetchWalletAccounts {\\n    currentUser {\\n      fetchWalletAccounts {\\n        walletAccounts {\\n          id\\n          accountNumber\\n          type\\n          name\\n          createdAt\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n'];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  query FetchWalletAccountBalance($accountNumber: String!) {\\n    currentUser {\\n      fetchWalletAccountBalance(accountNumber: $accountNumber) {\\n        availableBalance\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query FetchWalletAccountBalance($accountNumber: String!) {\\n    currentUser {\\n      fetchWalletAccountBalance(accountNumber: $accountNumber) {\\n        availableBalance\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: '\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n'\n): (typeof documents)['\\n  mutation VerifyPin($pin: String!) {\\n    currentUser {\\n      verifyPin(pin: $pin) {\\n        token\\n        expiresAt\\n      }\\n    }\\n  }\\n'];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: '\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n'\n): (typeof documents)['\\n  mutation RequestExpressSend($data: RequestExpressSendInput!) {\\n    currentUser {\\n      requestExpressSend(data: $data) {\\n        transaction {\\n          id\\n          sentAmount\\n          availableBalance\\n          createdAt\\n        }\\n      }\\n    }\\n  }\\n'];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: '\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n'\n): (typeof documents)['\\n  mutation ClearPaymentIntent($data: ClearPaymentIntentInput!) {\\n    currentUser {\\n      clearPaymentIntent(data: $data) {\\n        id\\n        amount\\n        fee\\n        status\\n        returnUrl\\n      }\\n    }\\n  }\\n'];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(\n  source: '\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n'\n): (typeof documents)['\\n  query FetchPaymentIntent($paymentIntentId: String!) {\\n    currentUser {\\n      fetchPaymentIntent(paymentIntentId: $paymentIntentId) {\\n        id\\n        organizationId\\n        requestedAmount\\n        totalFees\\n        description\\n        statementDescriptor\\n        returnUrl\\n        createdAt\\n        status\\n      }\\n    }\\n  }\\n'];\n\nexport function graphql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> =\n  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,WAAW;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EAChB,4dAA4d,EAC1dD,KAAK,CAACE,6BAA6B;EACrC,8PAA8P,EAC5PF,KAAK,CAACG,2BAA2B;EACnC,sMAAsM,EACpMH,KAAK,CAACI,iCAAiC;EACzC,mJAAmJ,EACjJJ,KAAK,CAACK,iBAAiB;EACzB,8QAA8Q,EAC5QL,KAAK,CAACM,0BAA0B;EAClC,mOAAmO,EACjON,KAAK,CAACO,0BAA0B;EAClC,4VAA4V,EAC1VP,KAAK,CAACQ;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;;AAIA;AACA;AACA;;AAIA;AACA;AACA;;AAKA,OAAO,SAASC,OAAOA,CAACC,MAAc,EAAE;EAAA,IAAAC,OAAA;EACtC,QAAAA,OAAA,GAAQV,SAAS,CAASS,MAAM,CAAC,cAAAC,OAAA,cAAAA,OAAA,GAAI,CAAC,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}