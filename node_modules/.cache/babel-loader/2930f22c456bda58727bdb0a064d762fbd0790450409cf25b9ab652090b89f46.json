{"ast":null,"code":"/* eslint-disable */\n\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport let CashOutProviderType = /*#__PURE__*/function (CashOutProviderType) {\n  CashOutProviderType[\"Paycools\"] = \"Paycools\";\n  CashOutProviderType[\"Paymongo\"] = \"Paymongo\";\n  return CashOutProviderType;\n}({});\nexport let CivilStatus = /*#__PURE__*/function (CivilStatus) {\n  CivilStatus[\"Divorced\"] = \"DIVORCED\";\n  CivilStatus[\"Married\"] = \"MARRIED\";\n  CivilStatus[\"Separated\"] = \"SEPARATED\";\n  CivilStatus[\"Single\"] = \"SINGLE\";\n  CivilStatus[\"Widowed\"] = \"WIDOWED\";\n  return CivilStatus;\n}({});\nexport let CryptoTransactionStatus = /*#__PURE__*/function (CryptoTransactionStatus) {\n  CryptoTransactionStatus[\"Completed\"] = \"COMPLETED\";\n  CryptoTransactionStatus[\"Error\"] = \"ERROR\";\n  CryptoTransactionStatus[\"New\"] = \"NEW\";\n  CryptoTransactionStatus[\"Processing\"] = \"PROCESSING\";\n  CryptoTransactionStatus[\"Scheduled\"] = \"SCHEDULED\";\n  CryptoTransactionStatus[\"ToClose\"] = \"TO_CLOSE\";\n  return CryptoTransactionStatus;\n}({});\nexport let CryptoTransactionsSortKeyType = /*#__PURE__*/function (CryptoTransactionsSortKeyType) {\n  CryptoTransactionsSortKeyType[\"CreatedAt\"] = \"createdAt\";\n  CryptoTransactionsSortKeyType[\"Id\"] = \"id\";\n  return CryptoTransactionsSortKeyType;\n}({});\nexport let CryptoWalletRiskLevel = /*#__PURE__*/function (CryptoWalletRiskLevel) {\n  CryptoWalletRiskLevel[\"High\"] = \"HIGH\";\n  CryptoWalletRiskLevel[\"Low\"] = \"LOW\";\n  CryptoWalletRiskLevel[\"Medium\"] = \"MEDIUM\";\n  return CryptoWalletRiskLevel;\n}({});\nexport let CryptoWalletType = /*#__PURE__*/function (CryptoWalletType) {\n  CryptoWalletType[\"Bnb\"] = \"BNB\";\n  CryptoWalletType[\"Btc\"] = \"BTC\";\n  CryptoWalletType[\"Eth\"] = \"ETH\";\n  CryptoWalletType[\"Matic\"] = \"MATIC\";\n  return CryptoWalletType;\n}({});\nexport let CryptoWalletsSortKeyType = /*#__PURE__*/function (CryptoWalletsSortKeyType) {\n  CryptoWalletsSortKeyType[\"CreatedAt\"] = \"createdAt\";\n  CryptoWalletsSortKeyType[\"Id\"] = \"id\";\n  CryptoWalletsSortKeyType[\"RiskLevel\"] = \"riskLevel\";\n  CryptoWalletsSortKeyType[\"UserId\"] = \"userId\";\n  CryptoWalletsSortKeyType[\"WalletAddress\"] = \"walletAddress\";\n  return CryptoWalletsSortKeyType;\n}({});\nexport let Gender = /*#__PURE__*/function (Gender) {\n  Gender[\"Female\"] = \"FEMALE\";\n  Gender[\"Male\"] = \"MALE\";\n  return Gender;\n}({});\nexport let MerchantPaymentStatus = /*#__PURE__*/function (MerchantPaymentStatus) {\n  MerchantPaymentStatus[\"AwaitingNextAction\"] = \"AWAITING_NEXT_ACTION\";\n  MerchantPaymentStatus[\"Processing\"] = \"PROCESSING\";\n  MerchantPaymentStatus[\"Succeeded\"] = \"SUCCEEDED\";\n  return MerchantPaymentStatus;\n}({});\nexport let OrganizationSortKeyType = /*#__PURE__*/function (OrganizationSortKeyType) {\n  OrganizationSortKeyType[\"CreatedAt\"] = \"createdAt\";\n  OrganizationSortKeyType[\"Name\"] = \"name\";\n  return OrganizationSortKeyType;\n}({});\nexport let OrganizationStatus = /*#__PURE__*/function (OrganizationStatus) {\n  OrganizationStatus[\"Activated\"] = \"ACTIVATED\";\n  OrganizationStatus[\"Deactivated\"] = \"DEACTIVATED\";\n  return OrganizationStatus;\n}({});\nexport let OrganizationType = /*#__PURE__*/function (OrganizationType) {\n  OrganizationType[\"Corporation\"] = \"CORPORATION\";\n  OrganizationType[\"Individual\"] = \"INDIVIDUAL\";\n  OrganizationType[\"Partnership\"] = \"PARTNERSHIP\";\n  OrganizationType[\"SoleProprietorship\"] = \"SOLE_PROPRIETORSHIP\";\n  return OrganizationType;\n}({});\nexport let PaymentMethodCode = /*#__PURE__*/function (PaymentMethodCode) {\n  PaymentMethodCode[\"Bank\"] = \"BANK\";\n  PaymentMethodCode[\"Card\"] = \"CARD\";\n  PaymentMethodCode[\"Ewallet\"] = \"EWALLET\";\n  return PaymentMethodCode;\n}({});\nexport let PrincipalTransactionStatus = /*#__PURE__*/function (PrincipalTransactionStatus) {\n  PrincipalTransactionStatus[\"Complete\"] = \"COMPLETE\";\n  PrincipalTransactionStatus[\"Failed\"] = \"FAILED\";\n  PrincipalTransactionStatus[\"Pending\"] = \"PENDING\";\n  return PrincipalTransactionStatus;\n}({});\nexport let PrincipalTransactionType = /*#__PURE__*/function (PrincipalTransactionType) {\n  PrincipalTransactionType[\"BillsPayment\"] = \"BILLS_PAYMENT\";\n  PrincipalTransactionType[\"ExpressSend\"] = \"EXPRESS_SEND\";\n  PrincipalTransactionType[\"OnlineBankCashIn\"] = \"ONLINE_BANK_CASH_IN\";\n  PrincipalTransactionType[\"OnlineBankCashOut\"] = \"ONLINE_BANK_CASH_OUT\";\n  PrincipalTransactionType[\"OverTheCounterCashIn\"] = \"OVER_THE_COUNTER_CASH_IN\";\n  PrincipalTransactionType[\"OverTheCounterCashOut\"] = \"OVER_THE_COUNTER_CASH_OUT\";\n  return PrincipalTransactionType;\n}({});\nexport let ReviewConsensus = /*#__PURE__*/function (ReviewConsensus) {\n  ReviewConsensus[\"Approved\"] = \"APPROVED\";\n  ReviewConsensus[\"PartiallyApproved\"] = \"PARTIALLY_APPROVED\";\n  ReviewConsensus[\"Rejected\"] = \"REJECTED\";\n  return ReviewConsensus;\n}({});\nexport let ReviewStatus = /*#__PURE__*/function (ReviewStatus) {\n  ReviewStatus[\"Active\"] = \"ACTIVE\";\n  ReviewStatus[\"Done\"] = \"DONE\";\n  ReviewStatus[\"Draft\"] = \"DRAFT\";\n  ReviewStatus[\"Submitted\"] = \"SUBMITTED\";\n  return ReviewStatus;\n}({});\nexport let RiskLevelType = /*#__PURE__*/function (RiskLevelType) {\n  RiskLevelType[\"High\"] = \"HIGH\";\n  RiskLevelType[\"Low\"] = \"LOW\";\n  RiskLevelType[\"Medium\"] = \"MEDIUM\";\n  return RiskLevelType;\n}({});\nexport let SendMoneyProviderType = /*#__PURE__*/function (SendMoneyProviderType) {\n  SendMoneyProviderType[\"Instapay\"] = \"instapay\";\n  SendMoneyProviderType[\"Pesonet\"] = \"pesonet\";\n  return SendMoneyProviderType;\n}({});\nexport let SortOrder = /*#__PURE__*/function (SortOrder) {\n  SortOrder[\"Asc\"] = \"asc\";\n  SortOrder[\"Desc\"] = \"desc\";\n  return SortOrder;\n}({});\nexport let TransactionSortKeyType = /*#__PURE__*/function (TransactionSortKeyType) {\n  TransactionSortKeyType[\"Amount\"] = \"amount\";\n  TransactionSortKeyType[\"CreatedAt\"] = \"createdAt\";\n  TransactionSortKeyType[\"Id\"] = \"id\";\n  return TransactionSortKeyType;\n}({});\nexport let TransactionType = /*#__PURE__*/function (TransactionType) {\n  TransactionType[\"BillsPaymentCompleted\"] = \"BILLS_PAYMENT_COMPLETED\";\n  TransactionType[\"BillsPaymentInitiated\"] = \"BILLS_PAYMENT_INITIATED\";\n  TransactionType[\"ExpressSendCompleted\"] = \"EXPRESS_SEND_COMPLETED\";\n  TransactionType[\"ExpressSendInitiated\"] = \"EXPRESS_SEND_INITIATED\";\n  TransactionType[\"OnlineBankCashInCompleted\"] = \"ONLINE_BANK_CASH_IN_COMPLETED\";\n  TransactionType[\"OnlineBankCashInInitiated\"] = \"ONLINE_BANK_CASH_IN_INITIATED\";\n  TransactionType[\"OnlineBankCashOutCompleted\"] = \"ONLINE_BANK_CASH_OUT_COMPLETED\";\n  TransactionType[\"OnlineBankCashOutInitiated\"] = \"ONLINE_BANK_CASH_OUT_INITIATED\";\n  TransactionType[\"OverTheCounterCashInCompleted\"] = \"OVER_THE_COUNTER_CASH_IN_COMPLETED\";\n  TransactionType[\"OverTheCounterCashInInitiated\"] = \"OVER_THE_COUNTER_CASH_IN_INITIATED\";\n  TransactionType[\"OverTheCounterCashOutCompleted\"] = \"OVER_THE_COUNTER_CASH_OUT_COMPLETED\";\n  TransactionType[\"OverTheCounterCashOutInitiated\"] = \"OVER_THE_COUNTER_CASH_OUT_INITIATED\";\n  return TransactionType;\n}({});\nexport let UserLogType = /*#__PURE__*/function (UserLogType) {\n  UserLogType[\"AddPermission\"] = \"ADD_PERMISSION\";\n  UserLogType[\"ApprovedUser\"] = \"APPROVED_USER\";\n  UserLogType[\"PartiallyApprovedUser\"] = \"PARTIALLY_APPROVED_USER\";\n  UserLogType[\"RejectUser\"] = \"REJECT_USER\";\n  UserLogType[\"RevokePermission\"] = \"REVOKE_PERMISSION\";\n  UserLogType[\"UpdateRole\"] = \"UPDATE_ROLE\";\n  UserLogType[\"UpdateUser\"] = \"UPDATE_USER\";\n  return UserLogType;\n}({});\nexport let UserLogsSortKeyType = /*#__PURE__*/function (UserLogsSortKeyType) {\n  UserLogsSortKeyType[\"AdminUser\"] = \"adminUser\";\n  UserLogsSortKeyType[\"CreatedAt\"] = \"createdAt\";\n  UserLogsSortKeyType[\"Id\"] = \"id\";\n  UserLogsSortKeyType[\"User\"] = \"user\";\n  return UserLogsSortKeyType;\n}({});\nexport let UserPermissionType = /*#__PURE__*/function (UserPermissionType) {\n  UserPermissionType[\"AdminEdit\"] = \"ADMIN_EDIT\";\n  UserPermissionType[\"AdminView\"] = \"ADMIN_VIEW\";\n  UserPermissionType[\"CreateOrganization\"] = \"CREATE_ORGANIZATION\";\n  UserPermissionType[\"ExportData\"] = \"EXPORT_DATA\";\n  UserPermissionType[\"ManageOrganization\"] = \"MANAGE_ORGANIZATION\";\n  UserPermissionType[\"OverTheCounterCashIn\"] = \"OVER_THE_COUNTER_CASH_IN\";\n  UserPermissionType[\"OverTheCounterCashOut\"] = \"OVER_THE_COUNTER_CASH_OUT\";\n  UserPermissionType[\"ReviewUserVerification\"] = \"REVIEW_USER_VERIFICATION\";\n  UserPermissionType[\"UpdateCryptoWallet\"] = \"UPDATE_CRYPTO_WALLET\";\n  UserPermissionType[\"UsersEdit\"] = \"USERS_EDIT\";\n  UserPermissionType[\"UsersView\"] = \"USERS_VIEW\";\n  UserPermissionType[\"ViewCryptoTransaction\"] = \"VIEW_CRYPTO_TRANSACTION\";\n  UserPermissionType[\"ViewCryptoWallet\"] = \"VIEW_CRYPTO_WALLET\";\n  UserPermissionType[\"ViewDashboard\"] = \"VIEW_DASHBOARD\";\n  UserPermissionType[\"ViewOrganization\"] = \"VIEW_ORGANIZATION\";\n  UserPermissionType[\"ViewTransactions\"] = \"VIEW_TRANSACTIONS\";\n  UserPermissionType[\"ViewWalletDetails\"] = \"VIEW_WALLET_DETAILS\";\n  return UserPermissionType;\n}({});\nexport let UserRole = /*#__PURE__*/function (UserRole) {\n  UserRole[\"Admin\"] = \"ADMIN\";\n  UserRole[\"ComplianceLevel_1\"] = \"COMPLIANCE_LEVEL_1\";\n  UserRole[\"ComplianceLevel_2\"] = \"COMPLIANCE_LEVEL_2\";\n  UserRole[\"CsLevel_1\"] = \"CS_LEVEL_1\";\n  UserRole[\"CsLevel_2\"] = \"CS_LEVEL_2\";\n  UserRole[\"CsLevel_3\"] = \"CS_LEVEL_3\";\n  UserRole[\"CsLevel_4\"] = \"CS_LEVEL_4\";\n  UserRole[\"SuperAdmin\"] = \"SUPER_ADMIN\";\n  UserRole[\"System\"] = \"SYSTEM\";\n  UserRole[\"User\"] = \"USER\";\n  return UserRole;\n}({});\nexport let UserSortKeyType = /*#__PURE__*/function (UserSortKeyType) {\n  UserSortKeyType[\"CreatedAt\"] = \"createdAt\";\n  UserSortKeyType[\"EmailAddress\"] = \"emailAddress\";\n  UserSortKeyType[\"LastName\"] = \"lastName\";\n  UserSortKeyType[\"UserId\"] = \"userId\";\n  return UserSortKeyType;\n}({});\nexport let UserVerificationSortKeyType = /*#__PURE__*/function (UserVerificationSortKeyType) {\n  UserVerificationSortKeyType[\"CreatedAt\"] = \"createdAt\";\n  return UserVerificationSortKeyType;\n}({});\nexport let UserVerificationStatus = /*#__PURE__*/function (UserVerificationStatus) {\n  UserVerificationStatus[\"Decline\"] = \"DECLINE\";\n  UserVerificationStatus[\"Pending\"] = \"PENDING\";\n  UserVerificationStatus[\"SemiVerified\"] = \"SEMI_VERIFIED\";\n  UserVerificationStatus[\"Unverified\"] = \"UNVERIFIED\";\n  UserVerificationStatus[\"Verified\"] = \"VERIFIED\";\n  return UserVerificationStatus;\n}({});\nexport let WalletAccountType = /*#__PURE__*/function (WalletAccountType) {\n  WalletAccountType[\"Individual\"] = \"INDIVIDUAL\";\n  WalletAccountType[\"Organization\"] = \"ORGANIZATION\";\n  return WalletAccountType;\n}({});\nexport const GetCurrentUserDetailsDocument = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GetCurrentUserDetails'\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'currentUser'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'getCurrentUserDetails'\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [{\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'id'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'displayName'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'auth0UserId'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'createdAt'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'profile'\n                },\n                selectionSet: {\n                  kind: 'SelectionSet',\n                  selections: [{\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'id'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'userId'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'firstName'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'middleName'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'lastName'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'mobileNumber'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'emailAddress'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'userProfilePicture'\n                    },\n                    selectionSet: {\n                      kind: 'SelectionSet',\n                      selections: [{\n                        kind: 'Field',\n                        name: {\n                          kind: 'Name',\n                          value: 'profilePicture'\n                        }\n                      }, {\n                        kind: 'Field',\n                        name: {\n                          kind: 'Name',\n                          value: 'avatarType'\n                        }\n                      }, {\n                        kind: 'Field',\n                        name: {\n                          kind: 'Name',\n                          value: 'isUseAvatar'\n                        }\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }]\n};\nexport const FetchWalletAccountsDocument = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'FetchWalletAccounts'\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'currentUser'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'fetchWalletAccounts'\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [{\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'walletAccounts'\n                },\n                selectionSet: {\n                  kind: 'SelectionSet',\n                  selections: [{\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'id'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'accountNumber'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'type'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'name'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'createdAt'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'updatedAt'\n                    }\n                  }]\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }]\n};\nexport const FetchWalletAccountBalanceDocument = {\n  \"kind\": \"Document\",\n  \"definitions\": [{\n    \"kind\": \"OperationDefinition\",\n    \"operation\": \"query\",\n    \"name\": {\n      \"kind\": \"Name\",\n      \"value\": \"FetchWalletAccountBalance\"\n    },\n    \"variableDefinitions\": [{\n      \"kind\": \"VariableDefinition\",\n      \"variable\": {\n        \"kind\": \"Variable\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"accountNumber\"\n        }\n      },\n      \"type\": {\n        \"kind\": \"NonNullType\",\n        \"type\": {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"String\"\n          }\n        }\n      }\n    }],\n    \"selectionSet\": {\n      \"kind\": \"SelectionSet\",\n      \"selections\": [{\n        \"kind\": \"Field\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"currentUser\"\n        },\n        \"selectionSet\": {\n          \"kind\": \"SelectionSet\",\n          \"selections\": [{\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"fetchWalletAccountBalance\"\n            },\n            \"arguments\": [{\n              \"kind\": \"Argument\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"accountNumber\"\n              },\n              \"value\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"accountNumber\"\n                }\n              }\n            }],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"availableBalance\"\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }]\n};\nexport const VerifyPinDocument = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: {\n      kind: 'Name',\n      value: 'VerifyPin'\n    },\n    variableDefinitions: [{\n      kind: 'VariableDefinition',\n      variable: {\n        kind: 'Variable',\n        name: {\n          kind: 'Name',\n          value: 'pin'\n        }\n      },\n      type: {\n        kind: 'NonNullType',\n        type: {\n          kind: 'NamedType',\n          name: {\n            kind: 'Name',\n            value: 'String'\n          }\n        }\n      }\n    }],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'currentUser'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'verifyPin'\n            },\n            arguments: [{\n              kind: 'Argument',\n              name: {\n                kind: 'Name',\n                value: 'pin'\n              },\n              value: {\n                kind: 'Variable',\n                name: {\n                  kind: 'Name',\n                  value: 'pin'\n                }\n              }\n            }],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [{\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'token'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'expiresAt'\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }]\n};\nexport const RequestExpressSendDocument = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: {\n      kind: 'Name',\n      value: 'RequestExpressSend'\n    },\n    variableDefinitions: [{\n      kind: 'VariableDefinition',\n      variable: {\n        kind: 'Variable',\n        name: {\n          kind: 'Name',\n          value: 'data'\n        }\n      },\n      type: {\n        kind: 'NonNullType',\n        type: {\n          kind: 'NamedType',\n          name: {\n            kind: 'Name',\n            value: 'RequestExpressSendInput'\n          }\n        }\n      }\n    }],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'currentUser'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'requestExpressSend'\n            },\n            arguments: [{\n              kind: 'Argument',\n              name: {\n                kind: 'Name',\n                value: 'data'\n              },\n              value: {\n                kind: 'Variable',\n                name: {\n                  kind: 'Name',\n                  value: 'data'\n                }\n              }\n            }],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [{\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'transaction'\n                },\n                selectionSet: {\n                  kind: 'SelectionSet',\n                  selections: [{\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'id'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'sentAmount'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'availableBalance'\n                    }\n                  }, {\n                    kind: 'Field',\n                    name: {\n                      kind: 'Name',\n                      value: 'createdAt'\n                    }\n                  }]\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }]\n};\nexport const ClearPaymentIntentDocument = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: {\n      kind: 'Name',\n      value: 'ClearPaymentIntent'\n    },\n    variableDefinitions: [{\n      kind: 'VariableDefinition',\n      variable: {\n        kind: 'Variable',\n        name: {\n          kind: 'Name',\n          value: 'data'\n        }\n      },\n      type: {\n        kind: 'NonNullType',\n        type: {\n          kind: 'NamedType',\n          name: {\n            kind: 'Name',\n            value: 'ClearPaymentIntentInput'\n          }\n        }\n      }\n    }],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'currentUser'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'clearPaymentIntent'\n            },\n            arguments: [{\n              kind: 'Argument',\n              name: {\n                kind: 'Name',\n                value: 'data'\n              },\n              value: {\n                kind: 'Variable',\n                name: {\n                  kind: 'Name',\n                  value: 'data'\n                }\n              }\n            }],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [{\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'id'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'amount'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'fee'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'status'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'returnUrl'\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }]\n};\nexport const FetchPaymentIntentDocument = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'FetchPaymentIntent'\n    },\n    variableDefinitions: [{\n      kind: 'VariableDefinition',\n      variable: {\n        kind: 'Variable',\n        name: {\n          kind: 'Name',\n          value: 'paymentIntentId'\n        }\n      },\n      type: {\n        kind: 'NonNullType',\n        type: {\n          kind: 'NamedType',\n          name: {\n            kind: 'Name',\n            value: 'String'\n          }\n        }\n      }\n    }],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'currentUser'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'fetchPaymentIntent'\n            },\n            arguments: [{\n              kind: 'Argument',\n              name: {\n                kind: 'Name',\n                value: 'paymentIntentId'\n              },\n              value: {\n                kind: 'Variable',\n                name: {\n                  kind: 'Name',\n                  value: 'paymentIntentId'\n                }\n              }\n            }],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [{\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'id'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'organizationId'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'requestedAmount'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'totalFees'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'description'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'statementDescriptor'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'returnUrl'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'createdAt'\n                }\n              }, {\n                kind: 'Field',\n                name: {\n                  kind: 'Name',\n                  value: 'status'\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n  }]\n};","map":{"version":3,"names":["CashOutProviderType","CivilStatus","CryptoTransactionStatus","CryptoTransactionsSortKeyType","CryptoWalletRiskLevel","CryptoWalletType","CryptoWalletsSortKeyType","Gender","MerchantPaymentStatus","OrganizationSortKeyType","OrganizationStatus","OrganizationType","PaymentMethodCode","PrincipalTransactionStatus","PrincipalTransactionType","ReviewConsensus","ReviewStatus","RiskLevelType","SendMoneyProviderType","SortOrder","TransactionSortKeyType","TransactionType","UserLogType","UserLogsSortKeyType","UserPermissionType","UserRole","UserSortKeyType","UserVerificationSortKeyType","UserVerificationStatus","WalletAccountType","GetCurrentUserDetailsDocument","kind","definitions","operation","name","value","selectionSet","selections","FetchWalletAccountsDocument","FetchWalletAccountBalanceDocument","VerifyPinDocument","variableDefinitions","variable","type","arguments","RequestExpressSendDocument","ClearPaymentIntentDocument","FetchPaymentIntentDocument"],"sources":["C:/Users/iandev/Documents/GitHub/pitaka-merchant-example/src/__generated__/gql/graphql.ts"],"sourcesContent":["/* eslint-disable */\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nexport type MakeEmpty<\n  T extends { [key: string]: unknown },\n  K extends keyof T,\n> = { [_ in K]?: never };\nexport type Incremental<T> =\n  | T\n  | {\n      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;\n    };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string };\n  String: { input: string; output: string };\n  Boolean: { input: boolean; output: boolean };\n  Int: { input: number; output: number };\n  Float: { input: number; output: number };\n  JSON: { input: any; output: any };\n  Upload: { input: any; output: any };\n};\n\nexport type ActivateOrganizationData = {\n  organization: OrganizationId;\n};\n\nexport type ActivateOrganizationInput = {\n  signedAt: Scalars['String']['input'];\n  signedRecordId: Scalars['String']['input'];\n};\n\nexport type Address = {\n  additionalDetails?: Maybe<Scalars['String']['output']>;\n  city?: Maybe<Scalars['String']['output']>;\n  country?: Maybe<Scalars['String']['output']>;\n  county?: Maybe<Scalars['String']['output']>;\n  province?: Maybe<Scalars['String']['output']>;\n  region?: Maybe<Scalars['String']['output']>;\n  streetAddress?: Maybe<Scalars['String']['output']>;\n  zipCode?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type AdminAddUserPermissionsData = {\n  userId: Scalars['String']['output'];\n};\n\nexport type AdminCheckAuthorizationData = {\n  isAuthorize: Scalars['Boolean']['output'];\n};\n\nexport type AdminFetchAdminLogsData = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<AdminUserLogsData>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchAllPermissionsData = {\n  permissions: Array<UserPermissionType>;\n};\n\nexport type AdminFetchAllRolesData = {\n  roles: Array<UserRole>;\n};\n\nexport type AdminFetchAllTransactions = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<AdminTransactionDetails>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchAllUsersPayload = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<UserCompleteData>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchCryptoTransactionReportData = {\n  createdAt: Scalars['String']['output'];\n  cryptoTransactionTransfers: Array<CryptoTransactionTransferData>;\n  cryptoWallet: CryptoWalletBasicData;\n  reportId: Scalars['String']['output'];\n  timestamp?: Maybe<Scalars['String']['output']>;\n  transactionHash: Scalars['String']['output'];\n  type: CryptoWalletType;\n};\n\nexport type AdminFetchCryptoTransactionReportsData = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<CryptoTransactionBasicData>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchCryptoWalletsData = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<CryptoWallet>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchCurrentUserDetailsData = {\n  auth0UserId: Scalars['String']['output'];\n  createdAt: Scalars['String']['output'];\n  displayName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  permissions: Array<UserPermissionType>;\n  profile?: Maybe<AdminUserProfile>;\n  role: UserRole;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type AdminFetchOrganizationsData = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<Organization>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchTransactionsCountData = {\n  allCount: Array<AdminTransactionsCountData>;\n  completeCount: Array<AdminTransactionsCountData>;\n  failedCount: Array<AdminTransactionsCountData>;\n  pendingCount: Array<AdminTransactionsCountData>;\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type AdminFetchTypesAndStatusData = {\n  principalTransactionStatus: Array<PrincipalTransactionStatus>;\n  principalTransactionType: Array<PrincipalTransactionType>;\n  userLogType: Array<UserLogType>;\n  userVerificationStatus: Array<UserVerificationStatus>;\n};\n\nexport type AdminFetchUserAccountLimitsData = {\n  incoming: CreditsPerPeriods;\n  outgoing: CreditsPerPeriods;\n  walletBalance: CreditsLeft;\n};\n\nexport type AdminFetchUserLogsData = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<AdminUserLogsData>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchUserVerificationsPayload = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<UserVerification>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type AdminFetchUserWalletAccountsData = {\n  walletAccounts: Array<WalletAccount>;\n};\n\nexport type AdminFetchUsersCountData = {\n  roleCount: Array<AdminUsersRoleCountData>;\n  totalCount: Scalars['Int']['output'];\n  verificationStatusCount: Array<AdminUsersVerificationStatusCountData>;\n};\n\nexport type AdminFetchVerificationsCountData = {\n  statusCount: Array<AdminVerificationsCountData>;\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type AdminFetchWalletAccountBalanceData = {\n  availableBalance: Scalars['Float']['output'];\n};\n\nexport type AdminManageCryptoWalletAccessControlData = {\n  cryptoWallet: UpdateCryptoWalletData;\n};\n\nexport type AdminMutation = {\n  adminActivateOrganization: ActivateOrganizationData;\n  adminAddUserPermissions: AdminAddUserPermissionsData;\n  adminCheckAuthorize: AdminCheckAuthorizationData;\n  adminCreateOrganization: OrganizationWithFeesAndLimits;\n  adminManageCryptoWalletAccessControl: AdminManageCryptoWalletAccessControlData;\n  adminManageOrganizationFees: ManageOrganizationFeesData;\n  adminManageOrganizationTransactionLimits: ManageOrganizationTransactionLimitsData;\n  adminRevokeUserPermissions: AdminRevokeUserPermissions;\n  adminUpdateCryptoWalletAMLScore: AdminUpdateCryptoWalletAmlScoreData;\n  adminUpdateOrganization: UpdateOrganizationData;\n  adminUpdateUserDetails: AdminUpdateUserDetailsData;\n  adminUpdateUserRole: AdminUpdateUserRoleData;\n};\n\nexport type AdminMutationAdminActivateOrganizationArgs = {\n  data: ActivateOrganizationInput;\n  organizationId: Scalars['String']['input'];\n};\n\nexport type AdminMutationAdminAddUserPermissionsArgs = {\n  permissions: Array<UserPermissionType>;\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminMutationAdminCreateOrganizationArgs = {\n  data: CreateOrganizationInput;\n};\n\nexport type AdminMutationAdminManageCryptoWalletAccessControlArgs = {\n  cryptoWalletId: Scalars['String']['input'];\n  isBlocked: Scalars['Boolean']['input'];\n};\n\nexport type AdminMutationAdminManageOrganizationFeesArgs = {\n  data: ManageOrganizationFeesInput;\n  organizationId: Scalars['String']['input'];\n};\n\nexport type AdminMutationAdminManageOrganizationTransactionLimitsArgs = {\n  data: ManageOrganizationTransactionLimitsInput;\n  organizationId: Scalars['String']['input'];\n};\n\nexport type AdminMutationAdminRevokeUserPermissionsArgs = {\n  permissions: Array<UserPermissionType>;\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminMutationAdminUpdateCryptoWalletAmlScoreArgs = {\n  cryptoWalletId: Scalars['String']['input'];\n};\n\nexport type AdminMutationAdminUpdateOrganizationArgs = {\n  data: UpdateOrganizationInput;\n  organizationId: Scalars['String']['input'];\n};\n\nexport type AdminMutationAdminUpdateUserDetailsArgs = {\n  userData: UpdateUserInput;\n  userId: Scalars['ID']['input'];\n};\n\nexport type AdminMutationAdminUpdateUserRoleArgs = {\n  role: UserRole;\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminQuery = {\n  adminFetchAdminLogs: AdminFetchAdminLogsData;\n  adminFetchAllPermissions: AdminFetchAllPermissionsData;\n  adminFetchAllRoles: AdminFetchAllRolesData;\n  adminFetchAllTransactions: AdminFetchAllTransactions;\n  adminFetchAllUsers: AdminFetchAllUsersPayload;\n  adminFetchCryptoTransactionReport: AdminFetchCryptoTransactionReportData;\n  adminFetchCryptoTransactionReports: AdminFetchCryptoTransactionReportsData;\n  adminFetchCryptoWalletDetails: CryptoWallet;\n  adminFetchCryptoWallets: AdminFetchCryptoWalletsData;\n  adminFetchCurrentUserDetails?: Maybe<AdminFetchCurrentUserDetailsData>;\n  adminFetchOrganizationById: OrganizationWithFeesAndLimits;\n  adminFetchOrganizations: AdminFetchOrganizationsData;\n  adminFetchTransactionDetails?: Maybe<AdminTransactionDetails>;\n  adminFetchTransactionsCount: AdminFetchTransactionsCountData;\n  adminFetchTypesAndStatus: AdminFetchTypesAndStatusData;\n  adminFetchUserAccountLimits: AdminFetchUserAccountLimitsData;\n  adminFetchUserCryptoWallets: FetchUserCryptoWalletsData;\n  adminFetchUserDetails?: Maybe<AdminUserDetails>;\n  adminFetchUserLatestVerification: Array<UserVerification>;\n  adminFetchUserLogs: AdminFetchUserLogsData;\n  adminFetchUserVerification?: Maybe<UserVerification>;\n  adminFetchUserVerifications: AdminFetchUserVerificationsPayload;\n  adminFetchUserWalletAccounts: AdminFetchUserWalletAccountsData;\n  adminFetchUsersCount: AdminFetchUsersCountData;\n  adminFetchVerificationsCount: AdminFetchVerificationsCountData;\n  adminFetchWalletAccountBalance: AdminFetchWalletAccountBalanceData;\n  adminGetUserPermissions: Array<GetUserPermissions>;\n};\n\nexport type AdminQueryAdminFetchAdminLogsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<UserLogsSortByInput>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n  typeFilter?: InputMaybe<Array<InputMaybe<UserLogType>>>;\n};\n\nexport type AdminQueryAdminFetchAllTransactionsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<TransactionSortByInput>;\n  statusFilter?: InputMaybe<Array<InputMaybe<PrincipalTransactionStatus>>>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n  typeFilter?: InputMaybe<Array<InputMaybe<PrincipalTransactionType>>>;\n};\n\nexport type AdminQueryAdminFetchAllUsersArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<UserSortByInput>;\n  statusFilter?: InputMaybe<Array<InputMaybe<UserVerificationStatus>>>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type AdminQueryAdminFetchCryptoTransactionReportArgs = {\n  transactionReportId: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchCryptoTransactionReportsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<CryptoTransactionsSortByInput>;\n  statusFilter?: InputMaybe<Array<InputMaybe<CryptoTransactionStatus>>>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type AdminQueryAdminFetchCryptoWalletDetailsArgs = {\n  walletAddress: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchCryptoWalletsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  isBlockedFilter?: InputMaybe<Scalars['Boolean']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<CryptoWalletsSortByInput>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type AdminQueryAdminFetchOrganizationByIdArgs = {\n  organizationId: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchOrganizationsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<OrganizationSortByInput>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type AdminQueryAdminFetchTransactionDetailsArgs = {\n  id: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchUserAccountLimitsArgs = {\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchUserCryptoWalletsArgs = {\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchUserDetailsArgs = {\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchUserLatestVerificationArgs = {\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchUserLogsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<UserLogsSortByInput>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n  typeFilter?: InputMaybe<Array<InputMaybe<UserLogType>>>;\n};\n\nexport type AdminQueryAdminFetchUserVerificationArgs = {\n  id: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchUserVerificationsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<UserVerificationSortByInput>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type AdminQueryAdminFetchUserWalletAccountsArgs = {\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminFetchWalletAccountBalanceArgs = {\n  accountNumber: Scalars['String']['input'];\n};\n\nexport type AdminQueryAdminGetUserPermissionsArgs = {\n  userId: Scalars['String']['input'];\n};\n\nexport type AdminRevokeUserPermissions = {\n  userId: Scalars['String']['output'];\n};\n\nexport type AdminTransactionDetails = {\n  amount: Scalars['Float']['output'];\n  createdAt: Scalars['String']['output'];\n  description?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  payee: WalletAccountOwnerUnion;\n  payeeBalance: Scalars['Float']['output'];\n  payor: WalletAccountOwnerUnion;\n  payorBalance: Scalars['Float']['output'];\n  status: PrincipalTransactionStatus;\n  type: TransactionType;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type AdminTransactionsCountData = {\n  count: Scalars['Int']['output'];\n  name: Scalars['String']['output'];\n  sum: Scalars['Int']['output'];\n};\n\nexport type AdminUpdateCryptoWalletAmlScoreData = {\n  cryptoWallet: UpdateCryptoWalletData;\n};\n\nexport type AdminUpdateUserDetailsData = {\n  userId: Scalars['ID']['output'];\n};\n\nexport type AdminUpdateUserRoleData = {\n  userId: Scalars['String']['output'];\n};\n\nexport type AdminUserDetails = {\n  address?: Maybe<Address>;\n  createdAt: Scalars['String']['output'];\n  displayName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  profile?: Maybe<UserProfile>;\n  role: UserRole;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type AdminUserLogsData = {\n  adminId: Scalars['String']['output'];\n  adminUser?: Maybe<UserCompleteData>;\n  createdAt: Scalars['String']['output'];\n  description?: Maybe<Scalars['String']['output']>;\n  id: Scalars['String']['output'];\n  referenceNumber?: Maybe<Scalars['String']['output']>;\n  type: Scalars['String']['output'];\n  updatedAt: Scalars['String']['output'];\n  user?: Maybe<UserCompleteData>;\n  userId: Scalars['String']['output'];\n};\n\nexport type AdminUserProfile = {\n  createdAt: Scalars['String']['output'];\n  emailAddress: Scalars['String']['output'];\n  firstName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  lastName: Scalars['String']['output'];\n  middleName?: Maybe<Scalars['String']['output']>;\n  mobileNumber: Scalars['String']['output'];\n  updatedAt: Scalars['String']['output'];\n  userId: Scalars['String']['output'];\n  userProfilePicture?: Maybe<UserProfilePictureType>;\n};\n\nexport type AdminUsersRoleCountData = {\n  count: Scalars['Int']['output'];\n  name: UserRole;\n};\n\nexport type AdminUsersVerificationStatusCountData = {\n  count: Scalars['Int']['output'];\n  name: UserVerificationStatus;\n};\n\nexport type AdminVerificationsCountData = {\n  count: Scalars['Int']['output'];\n  name: ReviewStatus;\n};\n\nexport type BillersInformation = {\n  category: Scalars['String']['output'];\n  code: Scalars['String']['output'];\n  description: Scalars['String']['output'];\n  logo: Scalars['String']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type BillersOptionsData = {\n  label: Scalars['String']['output'];\n  option: Scalars['String']['output'];\n};\n\nexport type BillersQuery = {\n  fetchBillerOtherInfoParameters: FetchBillerOtherInfoParametersData;\n  fetchBillersByCategory: FetchBillersByCategoryData;\n  fetchOtherCharges: FetchOtherChargesData;\n};\n\nexport type BillersQueryFetchBillerOtherInfoParametersArgs = {\n  billerCode: Scalars['String']['input'];\n};\n\nexport type BillersQueryFetchBillersByCategoryArgs = {\n  category: Scalars['String']['input'];\n};\n\nexport type BillersQueryFetchOtherChargesArgs = {\n  billerCode: Scalars['String']['input'];\n};\n\nexport type BillersRulesData = {\n  message: Scalars['String']['output'];\n  options: Array<BillersOptionsData>;\n  rule: Scalars['String']['output'];\n};\n\nexport type BillsPaymentParametersData = {\n  field: Scalars['String']['output'];\n  label: Scalars['String']['output'];\n  rules: Array<BillersRulesData>;\n};\n\nexport type CardDetailsInput = {\n  bankCode?: InputMaybe<Scalars['String']['input']>;\n  cardNumber?: InputMaybe<Scalars['String']['input']>;\n  cvc?: InputMaybe<Scalars['String']['input']>;\n  expiryMonth?: InputMaybe<Scalars['Int']['input']>;\n  expiryYear?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport enum CashOutProviderType {\n  Paycools = 'Paycools',\n  Paymongo = 'Paymongo',\n}\n\nexport type CheckBiometricData = {\n  existing: Scalars['Boolean']['output'];\n  isSameBiometric: Scalars['Boolean']['output'];\n};\n\nexport type CheckCryptoWalletData = {\n  existing: Scalars['Boolean']['output'];\n};\n\nexport type CheckExistingNumberData = {\n  existing: Scalars['Boolean']['output'];\n};\n\nexport type CheckWalletAccountAliasData = {\n  existing: Scalars['Boolean']['output'];\n};\n\nexport enum CivilStatus {\n  Divorced = 'DIVORCED',\n  Married = 'MARRIED',\n  Separated = 'SEPARATED',\n  Single = 'SINGLE',\n  Widowed = 'WIDOWED',\n}\n\nexport type ClearPaymentIntentData = {\n  amount: Scalars['Float']['output'];\n  fee: Scalars['Float']['output'];\n  id: Scalars['String']['output'];\n  returnUrl: Scalars['String']['output'];\n  status: MerchantPaymentStatus;\n};\n\nexport type ClearPaymentIntentInput = {\n  amount: Scalars['Float']['input'];\n  paymentIntentId: Scalars['String']['input'];\n  senderAccountNumber: Scalars['String']['input'];\n};\n\nexport type CreateFavoriteWalletData = {\n  id: Scalars['ID']['output'];\n};\n\nexport type CreateFavoriteWalletInput = {\n  favoriteWalletAccountId: Scalars['ID']['input'];\n  walletAccountId: Scalars['ID']['input'];\n};\n\nexport type CreateOrganizationInput = {\n  creatorUserId: Scalars['String']['input'];\n  name: Scalars['String']['input'];\n  type: OrganizationType;\n};\n\nexport type CreateVerificationData = {\n  id: Scalars['String']['output'];\n};\n\nexport type CreateVerificationInput = {\n  birthDate: Scalars['String']['input'];\n  fullName: Scalars['String']['input'];\n  images: Array<Scalars['Upload']['input']>;\n};\n\nexport type CreateWalletAccountInput = {\n  name: Scalars['String']['input'];\n  organizationId?: InputMaybe<Scalars['String']['input']>;\n  type: WalletAccountType;\n};\n\nexport type CreditsLeft = {\n  limit: Scalars['Float']['output'];\n  used: Scalars['Float']['output'];\n};\n\nexport type CreditsPerPeriods = {\n  daily: CreditsLeft;\n  monthly: CreditsLeft;\n};\n\nexport type CryptoTransactionBasicData = {\n  createdAt: Scalars['String']['output'];\n  reportId: Scalars['String']['output'];\n  transactionHash: Scalars['String']['output'];\n};\n\nexport enum CryptoTransactionStatus {\n  Completed = 'COMPLETED',\n  Error = 'ERROR',\n  New = 'NEW',\n  Processing = 'PROCESSING',\n  Scheduled = 'SCHEDULED',\n  ToClose = 'TO_CLOSE',\n}\n\nexport type CryptoTransactionTransferData = {\n  amount: Scalars['Float']['output'];\n  amountUSD: Scalars['Float']['output'];\n  cScore: Scalars['Int']['output'];\n  createdAt: Scalars['String']['output'];\n  id: Scalars['String']['output'];\n  isSender: Scalars['Boolean']['output'];\n  walletAddress: Scalars['String']['output'];\n};\n\nexport type CryptoTransactionsSortByInput = {\n  key: CryptoTransactionsSortKeyType;\n  sortOrder: SortOrder;\n};\n\nexport enum CryptoTransactionsSortKeyType {\n  CreatedAt = 'createdAt',\n  Id = 'id',\n}\n\nexport type CryptoWallet = {\n  alias: Scalars['String']['output'];\n  balance: Scalars['Float']['output'];\n  cScore: Scalars['Int']['output'];\n  createdAt: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  isBlocked: Scalars['Boolean']['output'];\n  lastOpen?: Maybe<Scalars['String']['output']>;\n  metadata?: Maybe<Scalars['JSON']['output']>;\n  riskLevel?: Maybe<CryptoWalletRiskLevel>;\n  type: CryptoWalletType;\n  updatedAt: Scalars['String']['output'];\n  user?: Maybe<UserCompleteData>;\n  userId: Scalars['String']['output'];\n  walletAddress: Scalars['String']['output'];\n};\n\nexport type CryptoWalletBasicData = {\n  alias?: Maybe<Scalars['String']['output']>;\n  userId: Scalars['String']['output'];\n  walletAddress: Scalars['String']['output'];\n};\n\nexport type CryptoWalletData = {\n  alias?: Maybe<Scalars['String']['output']>;\n  cScore?: Maybe<Scalars['Int']['output']>;\n  createdAt: Scalars['String']['output'];\n  id: Scalars['String']['output'];\n  isBlocked: Scalars['Boolean']['output'];\n  lastOpen?: Maybe<Scalars['String']['output']>;\n  riskLevel?: Maybe<RiskLevelType>;\n  supportedTokens?: Maybe<Array<SupportedToken>>;\n  type: CryptoWalletType;\n  updatedAt: Scalars['String']['output'];\n  user: UserCompleteData;\n  userId: Scalars['String']['output'];\n  walletAddress: Scalars['String']['output'];\n};\n\nexport enum CryptoWalletRiskLevel {\n  High = 'HIGH',\n  Low = 'LOW',\n  Medium = 'MEDIUM',\n}\n\nexport enum CryptoWalletType {\n  Bnb = 'BNB',\n  Btc = 'BTC',\n  Eth = 'ETH',\n  Matic = 'MATIC',\n}\n\nexport type CryptoWalletsSortByInput = {\n  key: CryptoWalletsSortKeyType;\n  sortOrder: SortOrder;\n};\n\nexport enum CryptoWalletsSortKeyType {\n  CreatedAt = 'createdAt',\n  Id = 'id',\n  RiskLevel = 'riskLevel',\n  UserId = 'userId',\n  WalletAddress = 'walletAddress',\n}\n\nexport type CurrentUserMutation = {\n  activateCryptoWallet: CryptoWalletData;\n  checkBiometric: CheckBiometricData;\n  checkWalletAccountAlias: CheckWalletAccountAliasData;\n  clearPaymentIntent: ClearPaymentIntentData;\n  createFavoriteWallet: CreateFavoriteWalletData;\n  createVerification: CreateVerificationData;\n  generateStaticQRPHCode?: Maybe<GenerateStaticQrphCodeData>;\n  getRefreshToken: GetRefreshTokenPayload;\n  payBills: PayBillsData;\n  registerUser: User;\n  removeFavoriteWallet: RemoveFavoriteWalletData;\n  renewAccessToken: RenewAccessTokenPayload;\n  requestCashIn: RequestCashInData;\n  requestCashOut: RequestCashOutData;\n  requestExpressSend: RequestExpressSendData;\n  saveBiometric: SaveBiometricData;\n  saveCryptoTransaction: SaveCryptoTransactionData;\n  saveCryptoWallet: SaveCryptoWalletData;\n  updateCryptoWalletBalance: UpdateCryptoWalletBalanceData;\n  updatePin: UpdatePinData;\n  updateUser: UpdateUserData;\n  updateWalletAccountAlias: UpdateWalletAccountAliasData;\n  updateWalletAccountShowAlias: UpdateWalletAccountShowAliasData;\n  verifyBiometric: VerifyBiometricData;\n  verifyPin: PinVerificationPayload;\n};\n\nexport type CurrentUserMutationActivateCryptoWalletArgs = {\n  type: CryptoWalletType;\n  walletAddress: Scalars['String']['input'];\n};\n\nexport type CurrentUserMutationCheckBiometricArgs = {\n  biometric?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type CurrentUserMutationCheckWalletAccountAliasArgs = {\n  alias: Scalars['String']['input'];\n};\n\nexport type CurrentUserMutationClearPaymentIntentArgs = {\n  data: ClearPaymentIntentInput;\n};\n\nexport type CurrentUserMutationCreateFavoriteWalletArgs = {\n  data: CreateFavoriteWalletInput;\n};\n\nexport type CurrentUserMutationCreateVerificationArgs = {\n  data: CreateVerificationInput;\n};\n\nexport type CurrentUserMutationGenerateStaticQrphCodeArgs = {\n  accountNumber: Scalars['String']['input'];\n};\n\nexport type CurrentUserMutationPayBillsArgs = {\n  data: PayBillsInput;\n};\n\nexport type CurrentUserMutationRegisterUserArgs = {\n  userData?: InputMaybe<RegisterUserInput>;\n};\n\nexport type CurrentUserMutationRemoveFavoriteWalletArgs = {\n  data: RemoveFavoriteWalletInput;\n};\n\nexport type CurrentUserMutationRenewAccessTokenArgs = {\n  refreshToken: Scalars['String']['input'];\n};\n\nexport type CurrentUserMutationRequestCashInArgs = {\n  data: RequestCashInInput;\n};\n\nexport type CurrentUserMutationRequestCashOutArgs = {\n  data: RequestCashOutInput;\n};\n\nexport type CurrentUserMutationRequestExpressSendArgs = {\n  data: RequestExpressSendInput;\n};\n\nexport type CurrentUserMutationSaveBiometricArgs = {\n  biometric: Scalars['String']['input'];\n};\n\nexport type CurrentUserMutationSaveCryptoTransactionArgs = {\n  data: SaveCryptoTransactionInput;\n};\n\nexport type CurrentUserMutationSaveCryptoWalletArgs = {\n  data: SaveCryptoWalletInput;\n};\n\nexport type CurrentUserMutationUpdateCryptoWalletBalanceArgs = {\n  data: UpdateCryptoWalletBalanceInput;\n};\n\nexport type CurrentUserMutationUpdatePinArgs = {\n  data: UpdatePinInput;\n};\n\nexport type CurrentUserMutationUpdateUserArgs = {\n  userData: UpdateUserInput;\n};\n\nexport type CurrentUserMutationUpdateWalletAccountAliasArgs = {\n  accountNumber: Scalars['String']['input'];\n  alias: Scalars['String']['input'];\n};\n\nexport type CurrentUserMutationUpdateWalletAccountShowAliasArgs = {\n  data: UpdateWalletAccountShowAliasInput;\n};\n\nexport type CurrentUserMutationVerifyBiometricArgs = {\n  sign: Scalars['String']['input'];\n};\n\nexport type CurrentUserMutationVerifyPinArgs = {\n  pin: Scalars['String']['input'];\n};\n\nexport type CurrentUserQuery = {\n  checkCryptoWallet: CheckCryptoWalletData;\n  checkExistingNumber: CheckExistingNumberData;\n  fetchCryptoWallet: CryptoWalletData;\n  fetchCryptoWallets: FetchUserCryptoWalletsData;\n  fetchCurrentUserActiveVerifications: Array<UserVerification>;\n  fetchCurrentUserLatestVerification: Array<UserVerification>;\n  fetchFavoriteWallets: Array<FavoriteWallet>;\n  fetchPaymentIntent: PaymentIntent;\n  fetchTransactionSumsByPeriod: FetchTransactionSumsByPeriodData;\n  fetchUserTransactionDetails?: Maybe<FetchUserTransactionDetailsData>;\n  fetchUserTransactions: FetchUserAllTransactionsData;\n  fetchWalletAccountBalance: FetchCurrentWalletBalanceData;\n  fetchWalletAccounts: FetchCurrentUserWalletAccountsData;\n  getCurrentUserDetails: GetCurrentUserDetailsData;\n  searchPhoneContactAccounts: SearchPhoneContactAccountsData;\n  searchWalletAccounts: SearchWalletAccountsData;\n};\n\nexport type CurrentUserQueryCheckCryptoWalletArgs = {\n  type: CryptoWalletType;\n  walletAddress: Scalars['String']['input'];\n};\n\nexport type CurrentUserQueryCheckExistingNumberArgs = {\n  mobileNumber: Scalars['String']['input'];\n};\n\nexport type CurrentUserQueryFetchCryptoWalletArgs = {\n  type: CryptoWalletType;\n  walletAddress: Scalars['String']['input'];\n};\n\nexport type CurrentUserQueryFetchFavoriteWalletsArgs = {\n  walletAccountId: Scalars['String']['input'];\n};\n\nexport type CurrentUserQueryFetchPaymentIntentArgs = {\n  paymentIntentId: Scalars['String']['input'];\n};\n\nexport type CurrentUserQueryFetchTransactionSumsByPeriodArgs = {\n  accountNumber: Scalars['String']['input'];\n};\n\nexport type CurrentUserQueryFetchUserTransactionDetailsArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type CurrentUserQueryFetchUserTransactionsArgs = {\n  continuationToken?: InputMaybe<Scalars['String']['input']>;\n  sortBy?: InputMaybe<TransactionSortByInput>;\n  take?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type CurrentUserQueryFetchWalletAccountBalanceArgs = {\n  accountNumber: Scalars['String']['input'];\n};\n\nexport type CurrentUserQuerySearchPhoneContactAccountsArgs = {\n  data: Array<PhoneContactAccountsInput>;\n};\n\nexport type CurrentUserQuerySearchWalletAccountsArgs = {\n  query: Scalars['String']['input'];\n};\n\nexport type DefaultCryptoTransactionData = {\n  createdAt: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n};\n\nexport type DefaultTransactionData = {\n  amount: Scalars['Float']['output'];\n  createdAt: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n};\n\nexport type FavoriteWallet = {\n  accountNumber: Scalars['String']['output'];\n  alias?: Maybe<Scalars['String']['output']>;\n  displayName: Scalars['String']['output'];\n  fullName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  userProfilePicture?: Maybe<UserProfilePictureType>;\n  walletAccountId: Scalars['ID']['output'];\n};\n\nexport type FetchBillerOtherInfoParametersData = {\n  parameters: Array<BillsPaymentParametersData>;\n};\n\nexport type FetchBillersByCategoryData = {\n  billers: Array<BillersInformation>;\n};\n\nexport type FetchCurrentCashoutProviderData = {\n  provider: CashOutProviderType;\n};\n\nexport type FetchCurrentUserWalletAccountsData = {\n  walletAccounts: Array<WalletAccount>;\n};\n\nexport type FetchCurrentWalletBalanceData = {\n  availableBalance: Scalars['Float']['output'];\n};\n\nexport type FetchOtherChargesData = {\n  otherCharges: Scalars['Float']['output'];\n};\n\nexport type FetchTransactionSumsByPeriodData = {\n  incoming: CreditsPerPeriods;\n  outgoing: CreditsPerPeriods;\n  walletBalance: CreditsLeft;\n};\n\nexport type FetchUserAllTransactionsData = {\n  continuationToken?: Maybe<Scalars['String']['output']>;\n  items: Array<FetchUserTransactionDetailsData>;\n  itemsPerPage: Scalars['Int']['output'];\n  totalItems: Scalars['Int']['output'];\n};\n\nexport type FetchUserCryptoWalletsData = {\n  cryptoWallets: Array<CryptoWalletData>;\n};\n\nexport type FetchUserTransactionDetailsData = {\n  amount: Scalars['Float']['output'];\n  balance: Scalars['Float']['output'];\n  createdAt: Scalars['String']['output'];\n  description: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  payee: WalletAccountOwnerUnion;\n  payor: WalletAccountOwnerUnion;\n  status: PrincipalTransactionStatus;\n  type: TransactionType;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport enum Gender {\n  Female = 'FEMALE',\n  Male = 'MALE',\n}\n\nexport type GenerateStaticQrphCodeData = {\n  qrImage: Scalars['String']['output'];\n};\n\nexport type GetCurrentUserDetailsData = {\n  address?: Maybe<Address>;\n  auth0UserId: Scalars['String']['output'];\n  createdAt: Scalars['String']['output'];\n  displayName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  photoUrl?: Maybe<Scalars['String']['output']>;\n  profile?: Maybe<UserProfile>;\n  role: UserRole;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type GetRefreshTokenPayload = {\n  refreshToken: Scalars['String']['output'];\n  refreshTokenExpiresAt: Scalars['Int']['output'];\n};\n\nexport type GetUserPermissions = {\n  createdAt: Scalars['String']['output'];\n  id: Scalars['String']['output'];\n  type: UserPermissionType;\n};\n\nexport type IdentityVerificationDetails = {\n  backIdPhotoUrl?: Maybe<Scalars['String']['output']>;\n  device?: Maybe<Scalars['String']['output']>;\n  errors?: Maybe<Scalars['String']['output']>;\n  frontIdPhotoUrl?: Maybe<Scalars['String']['output']>;\n  selfiePhotoUrl?: Maybe<Scalars['String']['output']>;\n};\n\nexport type ManageOrganizationFeesData = {\n  organization: OrganizationId;\n};\n\nexport type ManageOrganizationFeesInput = {\n  feeType: PrincipalTransactionType;\n  flatRate?: InputMaybe<Scalars['Float']['input']>;\n  surcharge?: InputMaybe<Scalars['Float']['input']>;\n};\n\nexport type ManageOrganizationTransactionLimitsData = {\n  organization: OrganizationId;\n};\n\nexport type ManageOrganizationTransactionLimitsInput = {\n  incomingDaily?: InputMaybe<Scalars['Int']['input']>;\n  incomingMonthly?: InputMaybe<Scalars['Int']['input']>;\n  outgoingDaily?: InputMaybe<Scalars['Int']['input']>;\n  outgoingMonthly?: InputMaybe<Scalars['Int']['input']>;\n  walletBalance?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport enum MerchantPaymentStatus {\n  AwaitingNextAction = 'AWAITING_NEXT_ACTION',\n  Processing = 'PROCESSING',\n  Succeeded = 'SUCCEEDED',\n}\n\nexport type Mutation = {\n  admin: AdminMutation;\n  approveReviewVerification?: Maybe<UserVerification>;\n  createWalletAccount?: Maybe<WalletAccount>;\n  currentUser: CurrentUserMutation;\n  sendSMS: SendSmsMutation;\n  startReviewVerification?: Maybe<UserVerification>;\n  submitUserVerification?: Maybe<UserVerification>;\n  transactions: TransactionsMutation;\n};\n\nexport type MutationApproveReviewVerificationArgs = {\n  comment?: InputMaybe<Scalars['String']['input']>;\n  consensus: ReviewConsensus;\n  verificationId: Scalars['String']['input'];\n};\n\nexport type MutationCreateWalletAccountArgs = {\n  walletAccountData?: InputMaybe<CreateWalletAccountInput>;\n};\n\nexport type MutationStartReviewVerificationArgs = {\n  comment?: InputMaybe<Scalars['String']['input']>;\n  verificationId: Scalars['String']['input'];\n};\n\nexport type MutationSubmitUserVerificationArgs = {\n  identityVerificationId: Scalars['String']['input'];\n};\n\nexport type OtcCashInInput = {\n  accountNumber: Scalars['String']['input'];\n  amount: Scalars['Float']['input'];\n};\n\nexport type Organization = {\n  createdAt: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  status?: Maybe<OrganizationStatus>;\n  type?: Maybe<OrganizationType>;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type OrganizationFees = {\n  flatRate: Scalars['Float']['output'];\n  surcharge: Scalars['Float']['output'];\n  type: PrincipalTransactionType;\n};\n\nexport type OrganizationId = {\n  id: Scalars['ID']['output'];\n};\n\nexport type OrganizationSortByInput = {\n  key: OrganizationSortKeyType;\n  sortOrder: SortOrder;\n};\n\nexport enum OrganizationSortKeyType {\n  CreatedAt = 'createdAt',\n  Name = 'name',\n}\n\nexport enum OrganizationStatus {\n  Activated = 'ACTIVATED',\n  Deactivated = 'DEACTIVATED',\n}\n\nexport enum OrganizationType {\n  Corporation = 'CORPORATION',\n  Individual = 'INDIVIDUAL',\n  Partnership = 'PARTNERSHIP',\n  SoleProprietorship = 'SOLE_PROPRIETORSHIP',\n}\n\nexport type OrganizationWalletOwner = {\n  accountNumber: Scalars['String']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type OrganizationWithFeesAndLimits = {\n  createdAt?: Maybe<Scalars['String']['output']>;\n  fees?: Maybe<Array<Maybe<OrganizationFees>>>;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  status?: Maybe<OrganizationStatus>;\n  transactionLimits?: Maybe<TransactionLimits>;\n  type?: Maybe<OrganizationType>;\n  updatedAt?: Maybe<Scalars['String']['output']>;\n};\n\nexport type OverTheCounterMutation = {\n  cashIn?: Maybe<Transaction>;\n};\n\nexport type OverTheCounterMutationCashInArgs = {\n  payload?: InputMaybe<OtcCashInInput>;\n};\n\nexport type PayBillsData = {\n  transaction: DefaultTransactionData;\n};\n\nexport type PayBillsInput = {\n  accountNumber: Scalars['String']['input'];\n  amount: Scalars['Float']['input'];\n  billerCode: Scalars['String']['input'];\n  otherCharges?: InputMaybe<Scalars['Float']['input']>;\n  otherInfo?: InputMaybe<Scalars['JSON']['input']>;\n  referenceNumber: Scalars['String']['input'];\n};\n\nexport type PaymentIntent = {\n  createdAt: Scalars['String']['output'];\n  description: Scalars['String']['output'];\n  id: Scalars['String']['output'];\n  organizationId: Scalars['String']['output'];\n  requestedAmount: Scalars['Float']['output'];\n  returnUrl: Scalars['String']['output'];\n  statementDescriptor?: Maybe<Scalars['String']['output']>;\n  status: MerchantPaymentStatus;\n  totalFees: Scalars['Float']['output'];\n};\n\nexport enum PaymentMethodCode {\n  Bank = 'BANK',\n  Card = 'CARD',\n  Ewallet = 'EWALLET',\n}\n\nexport type PhoneContactAccountsInput = {\n  name: Scalars['String']['input'];\n  phoneNumber: Scalars['String']['input'];\n  recordId: Scalars['String']['input'];\n};\n\nexport type PinVerificationPayload = {\n  expiresAt: Scalars['Int']['output'];\n  token: Scalars['String']['output'];\n};\n\nexport enum PrincipalTransactionStatus {\n  Complete = 'COMPLETE',\n  Failed = 'FAILED',\n  Pending = 'PENDING',\n}\n\nexport enum PrincipalTransactionType {\n  BillsPayment = 'BILLS_PAYMENT',\n  ExpressSend = 'EXPRESS_SEND',\n  OnlineBankCashIn = 'ONLINE_BANK_CASH_IN',\n  OnlineBankCashOut = 'ONLINE_BANK_CASH_OUT',\n  OverTheCounterCashIn = 'OVER_THE_COUNTER_CASH_IN',\n  OverTheCounterCashOut = 'OVER_THE_COUNTER_CASH_OUT',\n}\n\nexport type Query = {\n  admin: AdminQuery;\n  billers: BillersQuery;\n  currentUser: CurrentUserQuery;\n  transactions: TransactionsQuery;\n  walletAccount?: Maybe<WalletAccount>;\n};\n\nexport type QueryWalletAccountArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type RegisterUserInput = {\n  address?: InputMaybe<UserAddressInput>;\n  biometric?: InputMaybe<Scalars['String']['input']>;\n  birthDate?: InputMaybe<Scalars['String']['input']>;\n  civilStatus?: InputMaybe<CivilStatus>;\n  firstName: Scalars['String']['input'];\n  gender?: InputMaybe<Gender>;\n  lastName: Scalars['String']['input'];\n  middleName?: InputMaybe<Scalars['String']['input']>;\n  mobileNumber?: InputMaybe<Scalars['String']['input']>;\n  pin: Scalars['String']['input'];\n  politicallyExposedPerson?: InputMaybe<Scalars['Boolean']['input']>;\n  salaryRange?: InputMaybe<Scalars['String']['input']>;\n  sourceOfFunds?: InputMaybe<Scalars['String']['input']>;\n  userProfilePicture?: InputMaybe<UserProfilePictureInput>;\n};\n\nexport type RemoveFavoriteWalletData = {\n  id: Scalars['ID']['output'];\n};\n\nexport type RemoveFavoriteWalletInput = {\n  id: Scalars['ID']['input'];\n};\n\nexport type RenewAccessTokenPayload = {\n  expiresAt: Scalars['Int']['output'];\n  token: Scalars['String']['output'];\n};\n\nexport type RequestCashInData = {\n  imageUrl?: Maybe<Scalars['String']['output']>;\n  redirect?: Maybe<Scalars['String']['output']>;\n  transaction: DefaultTransactionData;\n};\n\nexport type RequestCashInInput = {\n  accountNumber: Scalars['String']['input'];\n  amount: Scalars['Float']['input'];\n  cardDetails?: InputMaybe<CardDetailsInput>;\n  paymentMethod: Scalars['String']['input'];\n  returnUrl?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type RequestCashOutData = {\n  provider: CashOutProviderType;\n  transaction: DefaultTransactionData;\n};\n\nexport type RequestCashOutInput = {\n  accountNumber: Scalars['String']['input'];\n  amount: Scalars['Float']['input'];\n  bankCode?: InputMaybe<Scalars['String']['input']>;\n  beneficiaryAccountName: Scalars['String']['input'];\n  beneficiaryAccountNumber: Scalars['String']['input'];\n  ewalletCode?: InputMaybe<Scalars['String']['input']>;\n  paymentMethodCode: PaymentMethodCode;\n  provider?: InputMaybe<SendMoneyProviderType>;\n};\n\nexport type RequestExpressSendData = {\n  transaction: RequestExpressSendDataTransaction;\n};\n\nexport type RequestExpressSendDataTransaction = {\n  availableBalance: Scalars['Float']['output'];\n  createdAt: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  sentAmount: Scalars['Float']['output'];\n};\n\nexport type RequestExpressSendInput = {\n  amount: Scalars['Float']['input'];\n  recipientAccountNumber: Scalars['String']['input'];\n  senderAccountNumber: Scalars['String']['input'];\n};\n\nexport enum ReviewConsensus {\n  Approved = 'APPROVED',\n  PartiallyApproved = 'PARTIALLY_APPROVED',\n  Rejected = 'REJECTED',\n}\n\nexport enum ReviewStatus {\n  Active = 'ACTIVE',\n  Done = 'DONE',\n  Draft = 'DRAFT',\n  Submitted = 'SUBMITTED',\n}\n\nexport enum RiskLevelType {\n  High = 'HIGH',\n  Low = 'LOW',\n  Medium = 'MEDIUM',\n}\n\nexport type SaveBiometricData = {\n  id: Scalars['ID']['output'];\n};\n\nexport type SaveCryptoTransactionData = {\n  transaction: DefaultCryptoTransactionData;\n};\n\nexport type SaveCryptoTransactionInput = {\n  transactionHash: Scalars['String']['input'];\n  type: CryptoWalletType;\n  walletAddress: Scalars['String']['input'];\n};\n\nexport type SaveCryptoWalletData = {\n  id: Scalars['String']['output'];\n};\n\nexport type SaveCryptoWalletInput = {\n  alias: Scalars['String']['input'];\n  balance?: InputMaybe<Scalars['Float']['input']>;\n  type: CryptoWalletType;\n  walletAddress: Scalars['String']['input'];\n};\n\nexport type SearchPhoneContactAccountsData = {\n  items: Array<SearchPhoneContactAccountsDataItem>;\n};\n\nexport type SearchPhoneContactAccountsDataItem = {\n  accountNumber: Scalars['String']['output'];\n  alias: Scalars['String']['output'];\n  contactMobileNumber: Scalars['String']['output'];\n  contactName: Scalars['String']['output'];\n  displayName: Scalars['String']['output'];\n  fullName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  mobileNumber: Scalars['String']['output'];\n  recordId: Scalars['String']['output'];\n  userProfilePicture?: Maybe<UserProfilePictureType>;\n};\n\nexport type SearchWalletAccountsData = {\n  items: Array<SearchWalletAccountsDataItem>;\n};\n\nexport type SearchWalletAccountsDataItem = {\n  accountNumber: Scalars['String']['output'];\n  alias: Scalars['String']['output'];\n  displayName: Scalars['String']['output'];\n  fullName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  mobileNumber: Scalars['String']['output'];\n  userProfilePicture?: Maybe<UserProfilePictureType>;\n};\n\nexport enum SendMoneyProviderType {\n  Instapay = 'instapay',\n  Pesonet = 'pesonet',\n}\n\nexport type SendSmsMutation = {\n  requestOTP: TelesignResultData;\n  unregisteredUserRequestOTP: TelesignResultData;\n  verifyOTP: TelesignVerifyResultData;\n};\n\nexport type SendSmsMutationRequestOtpArgs = {\n  mobileNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type SendSmsMutationUnregisteredUserRequestOtpArgs = {\n  mobileNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type SendSmsMutationVerifyOtpArgs = {\n  reference_id: Scalars['String']['input'];\n  verify_code: Scalars['String']['input'];\n};\n\nexport enum SortOrder {\n  Asc = 'asc',\n  Desc = 'desc',\n}\n\nexport type SupportedToken = {\n  contractAddress: Scalars['String']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type TelesignResultData = {\n  maskedContactNumber: Scalars['String']['output'];\n  refId: Scalars['String']['output'];\n};\n\nexport type TelesignVerifyResultData = {\n  isVerified: Scalars['Boolean']['output'];\n};\n\nexport type Transaction = {\n  createdAt: Scalars['String']['output'];\n  id: Scalars['String']['output'];\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type TransactionLimits = {\n  incoming: TransactionLimitsByPeriod;\n  outgoing: TransactionLimitsByPeriod;\n  walletBalance: Scalars['Int']['output'];\n};\n\nexport type TransactionLimitsByPeriod = {\n  daily: Scalars['Int']['output'];\n  monthly: Scalars['Int']['output'];\n};\n\nexport type TransactionSortByInput = {\n  key: TransactionSortKeyType;\n  sortOrder: SortOrder;\n};\n\nexport enum TransactionSortKeyType {\n  Amount = 'amount',\n  CreatedAt = 'createdAt',\n  Id = 'id',\n}\n\nexport enum TransactionType {\n  BillsPaymentCompleted = 'BILLS_PAYMENT_COMPLETED',\n  BillsPaymentInitiated = 'BILLS_PAYMENT_INITIATED',\n  ExpressSendCompleted = 'EXPRESS_SEND_COMPLETED',\n  ExpressSendInitiated = 'EXPRESS_SEND_INITIATED',\n  OnlineBankCashInCompleted = 'ONLINE_BANK_CASH_IN_COMPLETED',\n  OnlineBankCashInInitiated = 'ONLINE_BANK_CASH_IN_INITIATED',\n  OnlineBankCashOutCompleted = 'ONLINE_BANK_CASH_OUT_COMPLETED',\n  OnlineBankCashOutInitiated = 'ONLINE_BANK_CASH_OUT_INITIATED',\n  OverTheCounterCashInCompleted = 'OVER_THE_COUNTER_CASH_IN_COMPLETED',\n  OverTheCounterCashInInitiated = 'OVER_THE_COUNTER_CASH_IN_INITIATED',\n  OverTheCounterCashOutCompleted = 'OVER_THE_COUNTER_CASH_OUT_COMPLETED',\n  OverTheCounterCashOutInitiated = 'OVER_THE_COUNTER_CASH_OUT_INITIATED',\n}\n\nexport type TransactionsMutation = {\n  overTheCounter: OverTheCounterMutation;\n};\n\nexport type TransactionsQuery = {\n  fetchCurrentCashoutProvider: FetchCurrentCashoutProviderData;\n};\n\nexport type UpdateCryptoWalletBalanceData = {\n  id: Scalars['String']['output'];\n};\n\nexport type UpdateCryptoWalletBalanceInput = {\n  balance: Scalars['Float']['input'];\n  type: CryptoWalletType;\n  walletAddress: Scalars['String']['input'];\n};\n\nexport type UpdateCryptoWalletData = {\n  id: Scalars['String']['output'];\n};\n\nexport type UpdateOrganizationData = {\n  organization: OrganizationId;\n};\n\nexport type UpdateOrganizationInput = {\n  name?: InputMaybe<Scalars['String']['input']>;\n  type?: InputMaybe<OrganizationType>;\n};\n\nexport type UpdatePinData = {\n  id: Scalars['String']['output'];\n};\n\nexport type UpdatePinInput = {\n  otp: Scalars['String']['input'];\n  pin: Scalars['String']['input'];\n  reference_id: Scalars['String']['input'];\n};\n\nexport type UpdateUserData = {\n  id: Scalars['ID']['output'];\n};\n\nexport type UpdateUserInput = {\n  address?: InputMaybe<UserAddressInput>;\n  birthDate?: InputMaybe<Scalars['String']['input']>;\n  civilStatus?: InputMaybe<CivilStatus>;\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  gender?: InputMaybe<Gender>;\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  middleName?: InputMaybe<Scalars['String']['input']>;\n  mobileNumber?: InputMaybe<Scalars['String']['input']>;\n  politicallyExposedPerson?: InputMaybe<Scalars['Boolean']['input']>;\n  salaryRange?: InputMaybe<Scalars['String']['input']>;\n  sourceOfFunds?: InputMaybe<Scalars['String']['input']>;\n  userProfilePicture?: InputMaybe<UserProfilePictureInput>;\n};\n\nexport type UpdateWalletAccountAliasData = {\n  id: Scalars['String']['output'];\n};\n\nexport type UpdateWalletAccountShowAliasData = {\n  id: Scalars['String']['output'];\n};\n\nexport type UpdateWalletAccountShowAliasInput = {\n  accountNumber: Scalars['String']['input'];\n  showAlias: Scalars['Boolean']['input'];\n};\n\nexport type User = {\n  auth0UserId: Scalars['String']['output'];\n  createdAt: Scalars['String']['output'];\n  displayName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type UserAddressInput = {\n  additionalDetails?: InputMaybe<Scalars['String']['input']>;\n  city?: InputMaybe<Scalars['String']['input']>;\n  country?: InputMaybe<Scalars['String']['input']>;\n  county?: InputMaybe<Scalars['String']['input']>;\n  province?: InputMaybe<Scalars['String']['input']>;\n  region?: InputMaybe<Scalars['String']['input']>;\n  streetAddress?: InputMaybe<Scalars['String']['input']>;\n  zipCode?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type UserCompleteData = {\n  address?: Maybe<Address>;\n  auth0UserId: Scalars['String']['output'];\n  createdAt: Scalars['String']['output'];\n  displayName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  profile?: Maybe<UserProfile>;\n  role: UserRole;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport enum UserLogType {\n  AddPermission = 'ADD_PERMISSION',\n  ApprovedUser = 'APPROVED_USER',\n  PartiallyApprovedUser = 'PARTIALLY_APPROVED_USER',\n  RejectUser = 'REJECT_USER',\n  RevokePermission = 'REVOKE_PERMISSION',\n  UpdateRole = 'UPDATE_ROLE',\n  UpdateUser = 'UPDATE_USER',\n}\n\nexport type UserLogsSortByInput = {\n  key: UserLogsSortKeyType;\n  sortOrder: SortOrder;\n};\n\nexport enum UserLogsSortKeyType {\n  AdminUser = 'adminUser',\n  CreatedAt = 'createdAt',\n  Id = 'id',\n  User = 'user',\n}\n\nexport enum UserPermissionType {\n  AdminEdit = 'ADMIN_EDIT',\n  AdminView = 'ADMIN_VIEW',\n  CreateOrganization = 'CREATE_ORGANIZATION',\n  ExportData = 'EXPORT_DATA',\n  ManageOrganization = 'MANAGE_ORGANIZATION',\n  OverTheCounterCashIn = 'OVER_THE_COUNTER_CASH_IN',\n  OverTheCounterCashOut = 'OVER_THE_COUNTER_CASH_OUT',\n  ReviewUserVerification = 'REVIEW_USER_VERIFICATION',\n  UpdateCryptoWallet = 'UPDATE_CRYPTO_WALLET',\n  UsersEdit = 'USERS_EDIT',\n  UsersView = 'USERS_VIEW',\n  ViewCryptoTransaction = 'VIEW_CRYPTO_TRANSACTION',\n  ViewCryptoWallet = 'VIEW_CRYPTO_WALLET',\n  ViewDashboard = 'VIEW_DASHBOARD',\n  ViewOrganization = 'VIEW_ORGANIZATION',\n  ViewTransactions = 'VIEW_TRANSACTIONS',\n  ViewWalletDetails = 'VIEW_WALLET_DETAILS',\n}\n\nexport type UserProfile = {\n  birthDate?: Maybe<Scalars['String']['output']>;\n  civilStatus?: Maybe<CivilStatus>;\n  createdAt: Scalars['String']['output'];\n  emailAddress: Scalars['String']['output'];\n  firstName: Scalars['String']['output'];\n  gender?: Maybe<Gender>;\n  id: Scalars['ID']['output'];\n  lastName: Scalars['String']['output'];\n  middleName?: Maybe<Scalars['String']['output']>;\n  mobileNumber?: Maybe<Scalars['String']['output']>;\n  politicallyExposedPerson?: Maybe<Scalars['Boolean']['output']>;\n  salaryRange?: Maybe<Scalars['String']['output']>;\n  sourceOfFunds?: Maybe<Scalars['String']['output']>;\n  updatedAt: Scalars['String']['output'];\n  userId: Scalars['ID']['output'];\n  userProfilePicture?: Maybe<UserProfilePictureType>;\n  verificationStatus: UserVerificationStatus;\n};\n\nexport type UserProfilePictureInput = {\n  avatarType?: InputMaybe<Scalars['String']['input']>;\n  isUseAvatar?: InputMaybe<Scalars['Boolean']['input']>;\n  profilePicture?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type UserProfilePictureType = {\n  avatarType?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['String']['output']>;\n  isUseAvatar?: Maybe<Scalars['Boolean']['output']>;\n  profilePicture?: Maybe<Scalars['String']['output']>;\n};\n\nexport type UserProfileWalletOwner = {\n  accountNumber: Scalars['String']['output'];\n  alias?: Maybe<Scalars['String']['output']>;\n  displayName?: Maybe<Scalars['String']['output']>;\n  firstName: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  lastName: Scalars['String']['output'];\n  middleName: Scalars['String']['output'];\n  userId: Scalars['String']['output'];\n  userProfilePicture?: Maybe<WalletUserProfilePictureType>;\n};\n\nexport enum UserRole {\n  Admin = 'ADMIN',\n  ComplianceLevel_1 = 'COMPLIANCE_LEVEL_1',\n  ComplianceLevel_2 = 'COMPLIANCE_LEVEL_2',\n  CsLevel_1 = 'CS_LEVEL_1',\n  CsLevel_2 = 'CS_LEVEL_2',\n  CsLevel_3 = 'CS_LEVEL_3',\n  CsLevel_4 = 'CS_LEVEL_4',\n  SuperAdmin = 'SUPER_ADMIN',\n  System = 'SYSTEM',\n  User = 'USER',\n}\n\nexport type UserSortByInput = {\n  key: UserSortKeyType;\n  sortOrder: SortOrder;\n};\n\nexport enum UserSortKeyType {\n  CreatedAt = 'createdAt',\n  EmailAddress = 'emailAddress',\n  LastName = 'lastName',\n  UserId = 'userId',\n}\n\nexport type UserVerification = {\n  comment?: Maybe<Scalars['String']['output']>;\n  consensus?: Maybe<ReviewConsensus>;\n  createdAt: Scalars['String']['output'];\n  createdBy: UserCompleteData;\n  id: Scalars['String']['output'];\n  identityVerificationDetails?: Maybe<IdentityVerificationDetails>;\n  reviewer?: Maybe<User>;\n  status?: Maybe<ReviewStatus>;\n  updatedAt?: Maybe<Scalars['String']['output']>;\n};\n\nexport type UserVerificationSortByInput = {\n  key: UserVerificationSortKeyType;\n  sortOrder: SortOrder;\n};\n\nexport enum UserVerificationSortKeyType {\n  CreatedAt = 'createdAt',\n}\n\nexport enum UserVerificationStatus {\n  Decline = 'DECLINE',\n  Pending = 'PENDING',\n  SemiVerified = 'SEMI_VERIFIED',\n  Unverified = 'UNVERIFIED',\n  Verified = 'VERIFIED',\n}\n\nexport type UserWhereUniqueInput = {\n  auth0UserId?: InputMaybe<Scalars['String']['input']>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n};\n\nexport type VerifyBiometricData = {\n  expiresAt: Scalars['Int']['output'];\n  token: Scalars['String']['output'];\n};\n\nexport type WalletAccount = {\n  accountNumber: Scalars['String']['output'];\n  alias?: Maybe<Scalars['String']['output']>;\n  createdAt: Scalars['String']['output'];\n  displayName?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  showAlias?: Maybe<Scalars['Boolean']['output']>;\n  type: WalletAccountType;\n  updatedAt: Scalars['String']['output'];\n};\n\nexport type WalletAccountOwnerUnion =\n  | OrganizationWalletOwner\n  | UserProfileWalletOwner;\n\nexport enum WalletAccountType {\n  Individual = 'INDIVIDUAL',\n  Organization = 'ORGANIZATION',\n}\n\nexport type WalletUserProfilePictureType = {\n  avatarType?: Maybe<Scalars['String']['output']>;\n  isUseAvatar?: Maybe<Scalars['Boolean']['output']>;\n  profilePicture?: Maybe<Scalars['String']['output']>;\n};\n\nexport type GetCurrentUserDetailsQueryVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type GetCurrentUserDetailsQuery = {\n  currentUser: {\n    getCurrentUserDetails: {\n      id: string;\n      displayName: string;\n      auth0UserId: string;\n      createdAt: string;\n      profile?: {\n        id: string;\n        userId: string;\n        firstName: string;\n        middleName?: string | null;\n        lastName: string;\n        mobileNumber?: string | null;\n        emailAddress: string;\n        userProfilePicture?: {\n          profilePicture?: string | null;\n          avatarType?: string | null;\n          isUseAvatar?: boolean | null;\n        } | null;\n      } | null;\n    };\n  };\n};\n\nexport type FetchWalletAccountsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type FetchWalletAccountsQuery = {\n  currentUser: {\n    fetchWalletAccounts: {\n      walletAccounts: Array<{\n        id: string;\n        accountNumber: string;\n        type: WalletAccountType;\n        name: string;\n        createdAt: string;\n        updatedAt: string;\n      }>;\n    };\n  };\n};\n\nexport type VerifyPinMutationVariables = Exact<{\n  pin: Scalars['String']['input'];\n}>;\n\nexport type VerifyPinMutation = {\n  currentUser: { verifyPin: { token: string; expiresAt: number } };\n};\n\nexport type RequestExpressSendMutationVariables = Exact<{\n  data: RequestExpressSendInput;\n}>;\n\nexport type RequestExpressSendMutation = {\n  currentUser: {\n    requestExpressSend: {\n      transaction: {\n        id: string;\n        sentAmount: number;\n        availableBalance: number;\n        createdAt: string;\n      };\n    };\n  };\n};\n\nexport type ClearPaymentIntentMutationVariables = Exact<{\n  data: ClearPaymentIntentInput;\n}>;\n\nexport type ClearPaymentIntentMutation = {\n  currentUser: {\n    clearPaymentIntent: {\n      id: string;\n      amount: number;\n      fee: number;\n      status: MerchantPaymentStatus;\n      returnUrl: string;\n    };\n  };\n};\n\nexport type FetchPaymentIntentQueryVariables = Exact<{\n  paymentIntentId: Scalars['String']['input'];\n}>;\n\nexport type FetchPaymentIntentQuery = {\n  currentUser: {\n    fetchPaymentIntent: {\n      id: string;\n      organizationId: string;\n      requestedAmount: number;\n      totalFees: number;\n      description: string;\n      statementDescriptor?: string | null;\n      returnUrl: string;\n      createdAt: string;\n      status: MerchantPaymentStatus;\n    };\n  };\n};\n\nexport const GetCurrentUserDetailsDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'GetCurrentUserDetails' },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'currentUser' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'getCurrentUserDetails' },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'displayName' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'auth0UserId' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'createdAt' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'profile' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'id' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'userId' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'firstName' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'middleName' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'lastName' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'mobileNumber' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'emailAddress' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: {\n                                kind: 'Name',\n                                value: 'userProfilePicture',\n                              },\n                              selectionSet: {\n                                kind: 'SelectionSet',\n                                selections: [\n                                  {\n                                    kind: 'Field',\n                                    name: {\n                                      kind: 'Name',\n                                      value: 'profilePicture',\n                                    },\n                                  },\n                                  {\n                                    kind: 'Field',\n                                    name: { kind: 'Name', value: 'avatarType' },\n                                  },\n                                  {\n                                    kind: 'Field',\n                                    name: {\n                                      kind: 'Name',\n                                      value: 'isUseAvatar',\n                                    },\n                                  },\n                                ],\n                              },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  GetCurrentUserDetailsQuery,\n  GetCurrentUserDetailsQueryVariables\n>;\nexport const FetchWalletAccountsDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'FetchWalletAccounts' },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'currentUser' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'fetchWalletAccounts' },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'walletAccounts' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'id' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'accountNumber' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'type' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'name' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'createdAt' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'updatedAt' },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  FetchWalletAccountsQuery,\n  FetchWalletAccountsQueryVariables\n>;\n\nexport const FetchWalletAccountBalanceDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"FetchWalletAccountBalance\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"accountNumber\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"currentUser\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"fetchWalletAccountBalance\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"accountNumber\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"accountNumber\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"availableBalance\"}}]}}]}}]}}]} as unknown as DocumentNode<FetchWalletAccountBalanceQuery, FetchWalletAccountBalanceQueryVariables>;\nexport type FetchWalletAccountBalanceQueryVariables = Exact<{\n  accountNumber: Scalars['String']['input'];\n}>;\n\n\nexport type FetchWalletAccountBalanceQuery = { currentUser: { fetchWalletAccountBalance: { availableBalance: number } } };\n\nexport const VerifyPinDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: { kind: 'Name', value: 'VerifyPin' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'pin' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'String' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'currentUser' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'verifyPin' },\n                  arguments: [\n                    {\n                      kind: 'Argument',\n                      name: { kind: 'Name', value: 'pin' },\n                      value: {\n                        kind: 'Variable',\n                        name: { kind: 'Name', value: 'pin' },\n                      },\n                    },\n                  ],\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'token' } },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'expiresAt' },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<VerifyPinMutation, VerifyPinMutationVariables>;\nexport const RequestExpressSendDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: { kind: 'Name', value: 'RequestExpressSend' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'data' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'RequestExpressSendInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'currentUser' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'requestExpressSend' },\n                  arguments: [\n                    {\n                      kind: 'Argument',\n                      name: { kind: 'Name', value: 'data' },\n                      value: {\n                        kind: 'Variable',\n                        name: { kind: 'Name', value: 'data' },\n                      },\n                    },\n                  ],\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'transaction' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'id' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'sentAmount' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'availableBalance' },\n                            },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'createdAt' },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  RequestExpressSendMutation,\n  RequestExpressSendMutationVariables\n>;\nexport const ClearPaymentIntentDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: { kind: 'Name', value: 'ClearPaymentIntent' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'data' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'ClearPaymentIntentInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'currentUser' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'clearPaymentIntent' },\n                  arguments: [\n                    {\n                      kind: 'Argument',\n                      name: { kind: 'Name', value: 'data' },\n                      value: {\n                        kind: 'Variable',\n                        name: { kind: 'Name', value: 'data' },\n                      },\n                    },\n                  ],\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'amount' },\n                      },\n                      { kind: 'Field', name: { kind: 'Name', value: 'fee' } },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'status' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'returnUrl' },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  ClearPaymentIntentMutation,\n  ClearPaymentIntentMutationVariables\n>;\nexport const FetchPaymentIntentDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'FetchPaymentIntent' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: {\n            kind: 'Variable',\n            name: { kind: 'Name', value: 'paymentIntentId' },\n          },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'String' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'currentUser' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'fetchPaymentIntent' },\n                  arguments: [\n                    {\n                      kind: 'Argument',\n                      name: { kind: 'Name', value: 'paymentIntentId' },\n                      value: {\n                        kind: 'Variable',\n                        name: { kind: 'Name', value: 'paymentIntentId' },\n                      },\n                    },\n                  ],\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'organizationId' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'requestedAmount' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'totalFees' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'description' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'statementDescriptor' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'returnUrl' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'createdAt' },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'status' },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  FetchPaymentIntentQuery,\n  FetchPaymentIntentQueryVariables\n>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}